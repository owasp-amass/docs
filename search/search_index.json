{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Amass Docs","text":"<p>OWASP Amass is an open-source, versatile attack surface intelligence framework designed to comprehensively map an organization\u2019s footprint. Built for flexibility and depth, Amass combines advanced data collection, network mapping, and OSINT capabilities to deliver detailed insights into physical and digital assets. </p>"},{"location":"#overview","title":"Overview","text":"<p>OWASP Amass extends far beyond basic subdomain enumeration, offering a comprehensive, automated approach to information gathering that reveals the full scope of an entity's physical and digital footprint.</p> Open Asset Model (OAM) <p>The Open Asset Model expands traditional specifications by modeling both the physical and digital structure of a target's asset landscape. Defining asset types, their unique properties, and the relationships that join them, the <code>OAM</code> compiles a comprehensive view of the attack surface from an adversarial perspective.</p> <p> Unlocking the Power of OWASP Amass by @jeff_foley - DEFCON 31 Recon Village  33m  </p> <ul> <li> <p>Automated Deployment and Enumeration: Easily deploy Amass with Docker Compose for quick, automated asset discovery across multiple domains with minimal configuration.</p> </li> <li> <p>Centralized Asset Management with Asset Database: Use the Asset Database for storing, managing, and retrieving discovered assets, with support for long-term tracking and consistent data collection via the Open Asset Model.</p> </li> <li> <p>Scalable and Flexible Infrastructure: Designed for enterprise environments, Docker enables scalable deployments of Amass, ensuring consistent attack surface management for organizations of any size.</p> </li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Users have several options when installing the Amass framework.</p>"},{"location":"#build-from-source-code","title":"Build from Source Code","text":"<p>Install the Amass swiss army knife executable in your preferred environment.</p>"},{"location":"#prerequisites","title":"Prerequisites","text":"<ul> <li>Golang: Install an up-to-date version of Go on your system. You can download it from the Go Official Website.</li> </ul>"},{"location":"#perform-the-build-and-installation-process","title":"Perform the build and installation process","text":"<pre><code>CGO_ENABLED=0 go install -v github.com/owasp-amass/amass/v5/cmd/amass@main\n</code></pre> <p>At this point, the binary should be in $GOPATH/bin.</p>"},{"location":"#install-with-libpostal-for-street-address-parsing","title":"Install with Libpostal for Street Address Parsing","text":"<p>On Ubuntu/Debian <pre><code>sudo apt-get install curl autoconf make automake libtool pkg-config\n</code></pre></p> <p>On CentOS/RHEL <pre><code>sudo yum install curl autoconf automake libtool pkgconfig\n</code></pre></p> <p>On MacOS <pre><code>sudo brew install curl autoconf automake libtool pkg-config\n</code></pre></p> <p>Installing libpostal <pre><code>git clone https://github.com/openvenues/libpostal.git\ncd libpostal\n./bootstrap.sh\n./configure --datadir=[...some dir with a few GB of space...]\nmake\nsudo make install\n</code></pre></p> <p>On Linux it's probably a good idea to run. <pre><code>sudo ldconfig\n</code></pre></p> <p>Now, build OWASP Amass with libpostal compiled in for street address parsing.</p> <pre><code>CGO_ENABLED=1 go install -v github.com/owasp-amass/amass/v5/cmd/amass@main\n</code></pre> <p>At this point, the binary should be in $GOPATH/bin.</p>"},{"location":"#install-using-homebrew","title":"Install using Homebrew","text":"<p>The OWASP Amass Project maintains a Homebrew package.</p>"},{"location":"#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Homebrew: Intall an up-to-date version of the package manager on your system. You can download it from the Homebrew Official Website.</li> </ul>"},{"location":"#perform-the-build-and-installation-process_1","title":"Perform the build and installation process","text":"<p>The following two commands will install Amass into your environment:</p> <pre><code>brew tap owasp-amass/homebrew-amass\nbrew install amass\n</code></pre>"},{"location":"#execute-using-the-official-amass-docker-image","title":"Execute using the Official Amass Docker Image","text":""},{"location":"#prerequisites_2","title":"Prerequisites","text":"<p>Before you begin, make sure you have the following installed on your system:</p> <ul> <li>Docker: Up-to-date intallation running on your system. You can download it from the Docker Official Website.</li> </ul>"},{"location":"#step-1-pull-the-amass-docker-image","title":"Step 1: Pull the Amass Docker Image","text":"<pre><code>docker pull owaspamass/amass:latest\n</code></pre>"},{"location":"#step-2-give-the-image-a-convenient-tag","title":"Step 2: Give the Image a Convenient Tag","text":"<pre><code>docker tag owaspamass/amass:5.0.0 amass:latest\n</code></pre>"},{"location":"#step-3-execute-amass-using-the-container","title":"Step 3: Execute Amass using the Container","text":"<p>The volume mount allows the information collected to be stored outside of the container.</p> <pre><code>docker run --rm -it -v ~/.config/amass:/.config/amass amass:latest enum -d owasp.org\n</code></pre> <p>Warning</p> <p>The example above mounts the Amass configuration directory on Linux. The location of this directory can be different on other operating systems.</p>"},{"location":"#containerized-execution-within-docker-compose","title":"Containerized Execution within Docker Compose","text":"<p>Follow these steps to set up Amass using Docker Compose:</p>"},{"location":"#prerequisites_3","title":"Prerequisites","text":"<p>Before you begin, make sure you have the following installed on your system:</p> <ul> <li> <p>Docker: Up-to-date intallation running on your system. You can download it from the Docker Official Website.</p> </li> <li> <p>Docker Compose: Typically, Docker Compose is bundled with Docker Desktop, but you can verify the installation or install it seperately from     Docker Compose Installation.</p> </li> <li> <p>Git: To clone the Amass repository. Download it from the Git Official Website</p> </li> </ul>"},{"location":"#step-1-clone-the-amass-docker-compose-directory","title":"Step 1: Clone the Amass Docker Compose Directory","text":"<p>Start by cloning the OWASP Amass repository containing the Docker Compose setup files.</p> <pre><code>git clone https://github.com/owasp-amass/amass-docker-compose.git\nmv amass-docker-compose amass   # Optional: Rename the directory to something shorter (e.g., amass)\ncd amass   # Navigate to the local repository\n</code></pre>"},{"location":"#step-2-configure-the-compose-environment","title":"Step 2: Configure the Compose Environment","text":"<p>&gt; Open the <code>assetdb.env</code> File:</p> <p>Navigate to the <code>config</code> directory and open the <code>assetdb.env</code> file in a text editor to set the database passwords.</p> <pre><code>cd config\nnano assetdb.env # (1)!\n</code></pre> <ol> <li>You can replace <code>nano</code> with your preferred text editor, like <code>vim</code> or <code>code</code> for Visual Studio Code.</li> </ol> <p>&gt; Set the Passwords: </p> <p>In the <code>assetdb.env</code> file, locate the lines for <code>POSTGRES_PASSWORD</code> and <code>AMASS_PASSWORD</code>. Update them to assign new values. </p> <p>For example:</p> <pre><code>POSTGRES_PASSWORD=your_new_postgres_password\nAMASS_PASSWORD=your_new_amass_password\n</code></pre> <p>Warning</p> <p>This cannot be performed after you start the Docker Compose and the database has been created.</p> <p>&gt; Save Changes: </p> <p>After editing, save the file:</p> <ul> <li> <p>If you're using nano: Press <code>Ctrl + O</code> (then hit <code>Enter</code>) to save and <code>Ctrl + X</code> to exit.</p> </li> <li> <p>If you're using vim: Press <code>Esc</code>, then type <code>:wq</code> and hit <code>Enter</code>.</p> </li> </ul> <p>&gt; Modify the <code>config.yaml</code> File:</p> <p>Open the <code>config.yaml</code> file to set the database password to the one you just assigned as <code>AMASS_PASSWORD</code>.</p> <pre><code>nano config.yaml\n</code></pre> <p>&gt; Update the Database Password: </p> <p>Find the section in the <code>config.yaml</code> file that specifies the database settings. Change the password to match the <code>AMASS_PASSWORD</code> you set earlier.</p> <p>For example:</p> <pre><code>options:\n  ...\n  database: \"postgres://amass:password@assetdb:5432/assetdb\"\n</code></pre> <p>&gt; Save Changes:</p> <p>As before, save the changes using your preferred text editor.</p> <p>Update the Data Sources</p> <p>If you want to configure data sources, you can modify the <code>datasources.yaml</code> file. Open it with: <pre><code>nano datasources.yaml\n</code></pre> Uncomment the lines you need, and provide any necessary credentials.</p>"},{"location":"#step-3-building-the-docker-images","title":"Step 3: Building the Docker Images","text":"<p>Your Amass framework is now configured and ready to be built. Docker Compose will build the required images and start them correctly when you perform your first Amass command execution.</p> <p>&gt; Type the following to get started:</p> <pre><code>docker compose run --rm enum -active -d example.org # (1)!\n</code></pre> <ol> <li>If the build process times out, simply execute the command again to resume.</li> </ol>"},{"location":"#update-process-for-the-compose-environment","title":"Update Process for the Compose Environment","text":"<p>&gt; Make the local repo your current working directory:</p> <pre><code>cd amass\n</code></pre> <p>&gt; Shutdown the Amass containers within the Docker environment:</p> <pre><code>docker compose down\n</code></pre> <p>&gt; Backup the configuration files:</p> <pre><code>cp config/assetdb.env config/config.yaml config/datasources.yaml backups/\n</code></pre> <p>&gt; Backup the following directories: <code>assetdb</code> , <code>data</code> , <code>logs</code>.</p> <p>&gt; Update the local repo:</p> <pre><code>git pull origin main\n</code></pre>"},{"location":"#update-process-for-the-docker-images","title":"Update Process for the Docker Images","text":"<p>&gt; Make the local repo your current working directory: <pre><code>cd amass\n</code></pre></p> <p>&gt; Shutdown the Amass containers within the Docker environment:</p> <pre><code>docker compose down\n</code></pre> <p>&gt; Update components from their GitHub repos:</p> <pre><code>docker compose build --pull --no-cache\n</code></pre>"},{"location":"#amass-packages-maintained-by-a-third-party","title":"Amass Packages Maintained by a Third Party","text":""},{"location":"#license","title":"License","text":"<pre><code>Copyright 2017-2025 Jeff Foley\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"asset_db/postgres/","title":"Setting Up a PostgreSQL Database for OWASP Amass","text":"<p>The OWASP Amass framework can store collected data in a PostgreSQL database. This page walks you through the recommended setup process, including environment variables, database initialization, and configuration in your <code>config.yaml</code> file.</p> <p>Note: These instructions assume PostgreSQL is already installed and running on your system (e.g., <code>localhost:5432</code>). You\u2019ll need access to a user with sufficient privileges (typically <code>postgres</code>).</p>"},{"location":"asset_db/postgres/#1-define-environment-variables","title":"1. Define Environment Variables","text":"<p>Before running the setup commands, export the following environment variables to define your database, user, and passwords. These values will be used in the setup process and your Amass configuration.</p> <pre><code>export POSTGRES_USER=postgres\nexport POSTGRES_PASSWORD=postgres\nexport AMASS_DB=assetdb\nexport AMASS_USER=amass\nexport AMASS_PASSWORD=amass4OWASP\n</code></pre> Secrets Management <p>Consider storing these in a <code>.env</code> file and loading them with <code>source .env</code> to avoid retyping. Never commit secrets to version control.</p>"},{"location":"asset_db/postgres/#2-create-the-amass-database-and-user","title":"2. Create the Amass Database and User","text":"<p>Run the following commands in your shell to initialize the database and create a dedicated user for Amass. This uses the <code>psql</code> CLI with inline SQL for automation.</p> <pre><code># Add single quotes around the password to handle special characters\nexport TEMPPASS=\"'$AMASS_PASSWORD'\"\n\n# Create the database and user\npsql -v ON_ERROR_STOP=1 --username \"$POSTGRES_USER\" &lt;&lt;-EOSQL\n    \\getenv assetdb AMASS_DB\n    \\getenv username AMASS_USER\n    \\getenv password TEMPPASS\n\n    CREATE DATABASE :assetdb;\n    ALTER DATABASE :assetdb SET timezone TO 'UTC';\n    CREATE USER :username WITH PASSWORD :password;\nEOSQL\n</code></pre> <p>This will:</p> <ul> <li>Create the <code>assetdb</code> database</li> <li>Set its default timezone to UTC (recommended for consistency)</li> <li>Create a new user (<code>amass</code>) with the specified password</li> </ul>"},{"location":"asset_db/postgres/#3-enable-extensions-and-grant-privileges","title":"3. Enable Extensions and Grant Privileges","text":"<p>Next, connect to the new database and enable the required PostgreSQL extension and assign privileges to the Amass user.</p> <pre><code>psql -v ON_ERROR_STOP=1 --username \"$POSTGRES_USER\" --dbname \"$AMASS_DB\" &lt;&lt;-EOSQL\n    \\getenv username AMASS_USER\n\n    CREATE EXTENSION pg_trgm SCHEMA public;\n\n    GRANT USAGE ON SCHEMA public TO :username;\n    GRANT CREATE ON SCHEMA public TO :username;\n    GRANT ALL ON ALL TABLES IN SCHEMA public TO :username;\nEOSQL\n</code></pre> <p>This will:</p> <ul> <li>Enable the <code>pg_trgm</code> extension (used by Amass for efficient fuzzy string matching)</li> <li>Grant the necessary privileges for Amass to create and manage data within the <code>public</code> schema</li> </ul>"},{"location":"asset_db/postgres/#4-update-your-amass-configuration","title":"4. Update Your Amass Configuration","text":"<p>Once your database is set up, update your Amass <code>config.yaml</code> file with the connection string:</p> <pre><code>options:\n  # Be sure to replace the credentials with values matching your environment\n  database: \"postgres://amass:amass4OWASP@127.0.0.1:5432/assetdb\"\n</code></pre> Security Reminder <p>Avoid committing passwords to source control. Where possible, consider injecting the connection string using an environment variable (e.g., <code>${AMASS_DB_URI}</code>).</p>"},{"location":"asset_db/postgres/#5-test-the-connection","title":"5. Test the Connection","text":"<p>You can test whether the Amass framework is successfully connecting to your PostgreSQL database by running a standard enumeration command:</p> <pre><code>amass enum -config config.yaml\n</code></pre> <p>If the configuration is correct, the collected data will be stored in the PostgreSQL backend you configured.</p>"},{"location":"asset_db/postgres/#youre-done","title":"\u2705 You're Done!","text":"<p>Amass is now ready to store data in your PostgreSQL database. This enables you to persist, analyze, and query discovered assets using SQL or integrate with other tooling and dashboards.</p>"},{"location":"asset_db/postgres/#troubleshooting-tips","title":"Troubleshooting Tips","text":"<ul> <li>Connection Refused? Ensure PostgreSQL is listening on <code>127.0.0.1:5432</code> and that the database server is running.</li> <li>Authentication Failed? Double-check your environment variable values, especially the user and password.</li> <li>Extension Errors? Make sure the <code>pg_trgm</code> extension is available and installed. You can check with <code>\\dx</code> in <code>psql</code>.</li> </ul>"},{"location":"asset_db/postgres/#see-also","title":"See Also","text":"<ul> <li>Amass Configuration</li> <li>PostgreSQL Documentation</li> <li>PostgreSQL <code>pg_trgm</code> Extension Docs</li> <li>Managing Environment Variables Securely</li> </ul>"},{"location":"asset_db/triples/","title":"Triples Query Language","text":"<p>The Triples Query Language allows users of the OWASP Amass framework to request data from the Asset Database using the OWASP Open Asset Model. This query language enables traversals across the graph, where each triple describes a directed edge between two nodes.</p> <p>A triple is a traversal path that describes a step in a graph walk, or a \"hop\" in your graph between two nodes. Each triple consists of a subject, a predicate, and an object. The subject is the node being queried, the predicate describes the relationship, and the object is the target node. Results from the previous triple can serve as subjects for subsequent triples, enabling complex queries across the graph.</p>"},{"location":"asset_db/triples/#syntax-overview","title":"Syntax Overview","text":"<p>A single triple follows the format for outgoing relations from the subject:</p> <pre><code>&lt;subject&gt; - &lt;predicate&gt; -&gt; &lt;object&gt;\n</code></pre> <p>Or, the arrow pointing in the other direction for incoming relations to the subject:</p> <pre><code>&lt;subject&gt; &lt;- &lt;predicate&gt; - &lt;object&gt;\n</code></pre> <ul> <li>Subject: The starting node of the traversal.</li> <li>Predicate: Describes the relationship.</li> <li>Object: The ending node of the traversal.</li> </ul>"},{"location":"asset_db/triples/#components-of-a-triple","title":"Components of a Triple","text":"<p>Each node and predicate in the triple has the following format:</p> <pre><code>&lt;type:label,since:DATE,prop:[type:label,atrribute:value]&gt;\n\n&lt;ipaddress:#/72.*/#,prop:[sourceproperty:DNS-IP,since:2025-07-01,confidence:80]&gt;\n</code></pre> <p>Here is an example of </p> <ul> <li>type: The type of the node (e.g., <code>fqdn</code> or <code>ipaddress</code>).</li> <li>label: The specific value associated with the node (e.g. <code>dns_record</code>).</li> <li>since: An optional filter specifying a date to limit results after a certain point.</li> <li>prop: Optional properties for the node, such as additional attributes or metadata.</li> <li>attributes: Optional fields from the data type used for filtering (e.g. <code>header.rr_type:#/1|28/#</code>).</li> </ul>"},{"location":"asset_db/triples/#supported-query-elements","title":"Supported Query Elements","text":"<ul> <li>Constant Values: Specific, static values for filtering (e.g., <code>fqdn:owasp.org</code>).</li> <li>Wildcard ('*'): A wildcard character that can match any value (e.g., <code>ipaddress:*</code>).</li> <li>Regular Expressions ('#//#'): A regular expression for more specific filtering (e.g. <code>#/.*google.*/#</code>).</li> </ul>"},{"location":"asset_db/triples/#example-queries","title":"Example Queries","text":""},{"location":"asset_db/triples/#1-from-root-domain-name-to-ip-addresses","title":"1. From Root Domain Name to IP Addresses","text":"<p>This query retrieves all IP addresses associated with the root domain name <code>owasp.org</code>, starting from the domain and considering DNS records since July 1<sup>st</sup>, 2025.</p> <pre><code>&lt;fqdn:owasp.org&gt; - &lt;*:dns_record,since:2025-07-01&gt; -&gt; &lt;ipaddress:*&gt;\n</code></pre> <ul> <li>Subject: <code>&lt;fqdn:owasp.org&gt;</code></li> <li>Predicate: <code>&lt;*:dns_record,since:2025-07-01&gt;</code></li> <li>Object: <code>&lt;ipaddress:*&gt;</code></li> </ul>"},{"location":"asset_db/triples/#2-root-domain-name-to-subdomains","title":"2. Root Domain Name to Subdomains","text":"<p>This query retrieves all subdomains of the root domain <code>owasp.org</code>, starting from the domain and considering the relationship to nodes since July 1<sup>st</sup>, 2025.</p> <pre><code>&lt;fqdn:owasp.org&gt; - &lt;*:node,since:2025-07-01&gt; -&gt; &lt;*&gt;\n</code></pre> <ul> <li>Subject: <code>&lt;fqdn:owasp.org&gt;</code></li> <li>Predicate: <code>&lt;*:node,since:2025-07-01&gt;</code></li> <li>Object: <code>&lt;*&gt;</code></li> </ul> <p>The object can simply specify the wildcard character, since the 'node' relation outcoming from an FQDN must connect with another FQDN.</p>"},{"location":"asset_db/triples/#3-subdomain-to-ip-address","title":"3. Subdomain to IP Address","text":"<p>This query retrieves IP addresses for all subdomain names (e.g. <code>subdomain.owasp.org</code>), acquired from a previous triple, and their DNS records since July 1<sup>st</sup>, 2025.</p> <pre><code>&lt;fqdn:#/.*owasp.org/#&gt; - &lt;*:dns_record,since:2025-07-01&gt; -&gt; &lt;ipaddress:*&gt;\n</code></pre> <ul> <li>Subject: <code>&lt;fqdn:#/.*owasp.org/#&gt;</code></li> <li>Predicate: <code>&lt;*:dns_record,since:2025-07-01&gt;</code></li> <li>Object: <code>&lt;ipaddress:*&gt;</code></li> </ul>"},{"location":"asset_db/triples/#filtering-with-regular-expressions","title":"Filtering with Regular Expressions","text":"<p>You can use regular expressions to filter the query results. For example, if you want to query IP addresses associated with domain names that match a specific pattern, you can use:</p> <pre><code>&lt;fqdn:google.com&gt; - &lt;*:dns_record&gt; -&gt; &lt;ipaddress:#/192.168.*/#&gt;\n</code></pre> <ul> <li>Subject: <code>&lt;fqdn:google.com&gt;</code></li> <li>Predicate: <code>&lt;*:dns_record&gt;</code></li> <li>Object: <code>&lt;ipaddress:#/192.168.*/#&gt;</code></li> </ul> <p>This query retrieves IP addresses for <code>google.com</code> where the IP address matches the <code>192.168.*</code> range.</p>"},{"location":"asset_db/triples/#traversing-multiple-steps","title":"Traversing Multiple Steps","text":"<p>Triples allow for multiple traversals in a query. You can chain multiple triples to traverse from one node to another through various relationships. For example:</p> <pre><code>amass assoc -t1 '&lt;fqdn:owasp.org&gt; - &lt;*:node&gt; -&gt; &lt;*&gt;' -t2 '&lt;fqdn:*&gt; - &lt;*:dns_record&gt; -&gt; &lt;ipaddress:*&gt;'\n</code></pre> <p>Here, the first triple retrieves all nodes related to the root domain <code>owasp.org</code>, and the second triple retrieves IP addresses associated with those nodes. The entire walk that traverses all triples, and all related properties, is provided in the JSON output.</p>"},{"location":"asset_db/triples/#conclusion","title":"Conclusion","text":"<p>The Triples Query Language is a powerful way to interact with the OWASP Asset Database and extract relevant data from the Open Asset Model. By using this language, users can perform flexible, precise queries to navigate the complex relationships between assets, making it a valuable tool for asset discovery and attack surface management.</p>"},{"location":"asset_db/triples/#see-also","title":"See Also","text":"<ul> <li>Asset Database</li> <li>Setting Up PostgreSQL</li> </ul>"},{"location":"configuration/","title":"Amass Configuration Guide","text":"<p>This document explains the structure and options available in Amass configuration files. Amass uses YAML files to define its scan scope, data sources, and operational options. Understanding these files will help you customize Amass for your use case.</p>"},{"location":"configuration/#main-configuration-configyaml","title":"Main Configuration: <code>config.yaml</code>","text":"<p>The main configuration file, typically named <code>config.yaml</code>, controls the scope of your scan, scanning options, and transformation rules. Below is a breakdown of its main sections:</p>"},{"location":"configuration/#scope","title":"<code>scope</code>","text":"<p>The <code>scope</code> section defines the targets and boundaries for enumeration and scanning. Each field is parsed and normalized by Amass, supporting a variety of input formats.</p> <p>Supported Fields:</p> <ul> <li><code>domains</code> (array of strings): Registered domain names in scope (e.g., <code>owasp.org</code>).</li> <li><code>ips</code> (array of strings): IP addresses in scope. Supports single IPs (e.g., <code>192.0.2.1</code>), dash-ranges (e.g., <code>192.168.0.3-8</code>), and full ranges (e.g., <code>192.168.0.10-192.168.0.20</code>).</li> <li><code>asns</code> (array of strings): Autonomous System Numbers (ASNs) in scope (e.g., <code>AS15169</code>).</li> <li><code>cidrs</code> (array of strings): CIDR ranges in scope (e.g., <code>192.0.2.0/24</code>).</li> <li><code>ports</code> (array of ints): Ports to be used when actively scanning services (e.g., <code>80</code>, <code>443</code>, <code>8080</code>).</li> <li><code>blacklist</code> (array of strings): Subdomains to be excluded from results.</li> </ul> <p>Example:</p> <pre><code>scope:\n  domains:\n    - owasp.org\n  ips:\n    - 192.0.2.1\n    - 192.168.0.10-192.168.0.20\n  cidrs:\n    - 192.0.2.0/24\n  ports:\n    - 80\n    - 443\n  blacklist:\n    - test.owasp.org\n</code></pre>"},{"location":"configuration/#seed","title":"<code>seed</code>","text":"<p>The <code>seed</code> section is optional and allows you to specify an initial set of domains, IPs, CIDRs, ASNs, ports, and blacklist entries. If provided, Amass uses <code>seed</code> to initialize the scan scope. If the <code>scope</code> section is not specified, the <code>seed</code> will also be used as the scope. Otherwise, <code>seed</code> and <code>scope</code> are treated as separate entities, and both can be specified independently.</p> <p>Supported Fields:</p> <ul> <li><code>domains</code> (array of strings): Registered domain names to seed the scan (e.g., <code>owasp.org</code>).</li> <li><code>ips</code> (array of strings): IP addresses to seed the scan. Supports single IPs, dash-ranges, and full ranges.</li> <li><code>asns</code> (array of strings): Autonomous System Numbers to seed the scan (e.g., <code>AS15169</code>).</li> <li><code>cidrs</code> (array of strings): CIDR ranges to seed the scan (e.g., <code>192.0.2.0/24</code>).</li> <li><code>ports</code> (array of ints): Ports to be used when actively scanning services.</li> <li><code>blacklist</code> (array of strings): Subdomains to be excluded from results.</li> </ul> <p>Example:</p> <pre><code>seed:\n  domains:\n    - owasp.org\n  ips:\n    - 192.0.2.1\n    - 192.168.0.10-192.168.0.20\n  cidrs:\n    - 192.0.2.0/24\n  ports:\n    - 80\n    - 443\n  blacklist:\n    - test.owasp.org\n</code></pre>"},{"location":"configuration/#options","title":"<code>options</code>","text":"<p>The <code>options</code> section controls data sources, brute force, alterations, engine/database connections, and default values for transforms. Each option is handled by dedicated loader functions in Amass, and must match the expected type.</p> <p>Supported Options:</p> <ul> <li><code>datasources</code> (string): Path to the data sources YAML file. Required for external data source integration.</li> <li>For information about the format and fields in this file, see the Data Sources Configuration section.</li> <li><code>engine</code> (string): URL for the Amass engine API (e.g., <code>http://127.0.0.1:4000/graphql</code>).</li> <li><code>database</code> (string): Database connection string (e.g., <code>bolt://neo4j:amass4OWASP@neo4j:7687/neo4j</code> or <code>postgres://amass:amass4OWASP@assetdb:5432/assetdb</code>).</li> <li><code>bruteforce</code> (object):</li> <li><code>enabled</code> (bool): Enable or disable brute force subdomain enumeration.</li> <li><code>wordlists</code> (array of strings): List of wordlist files for brute forcing. Each file can be plain text or gzipped.</li> <li><code>alterations</code> (object):</li> <li><code>enabled</code> (bool): Enable or disable name alteration techniques.</li> <li><code>wordlists</code> (array of strings): List of wordlist files for alterations. Each file can be plain text or gzipped.</li> <li><code>default_transform_values</code> (object):</li> <li><code>ttl</code> (int): Default time-to-live for transform results (in minutes).</li> <li><code>confidence</code> (int): Default confidence value (percentage).</li> <li><code>priority</code> (int): Default priority value.</li> <li><code>active</code> (bool): Enable active enumeration (e.g., zone transfers, certificate checks).</li> <li><code>rigid_boundaries</code> (bool): Enforce strict scope boundaries for enumeration.</li> </ul> <p>Notice: Relative paths are relative to the config file location.</p> <p>Example:</p> <pre><code>options:\n  datasources: \"./datasources.yaml\"\n  engine: \"http://127.0.0.1:4000/graphql\"\n  database: \"bolt://neo4j:amass4OWASP@neo4j:7687/neo4j\"\n  bruteforce:\n    enabled: false\n    wordlists:\n      - \"./namelist.txt\"\n  alterations:\n    enabled: false\n    wordlists:\n      - \"./alterations.txt\"\n  default_transform_values:\n    ttl: 1440\n    confidence: 50\n    priority: 5\n  active: true\n  rigid_boundaries: false\n</code></pre>"},{"location":"configuration/#environment-variables-for-engine-and-database","title":"Environment Variables for Engine and Database","text":"<p>Amass supports configuring the Engine API and Database connection using environment variables as an alternative to specifying the <code>engine</code> or <code>database</code> URI in the <code>options</code> section. If you specify a URI in the config file for either <code>engine</code> or <code>database</code>, Amass will NOT use the corresponding environment variables for that object. There is no merging of environment variables and config values per object\u2014it's either one or the other for each.</p> <p>Engine API Environment Variables:</p> <ul> <li><code>AMASS_ENGINE_USER</code>: Username for Engine API authentication</li> <li><code>AMASS_ENGINE_PASSWORD</code>: Password for Engine API authentication</li> <li><code>AMASS_ENGINE_HOST</code>: Host for the Engine API (default: <code>localhost</code>)</li> <li><code>AMASS_ENGINE_PORT</code>: Port for the Engine API (default: <code>4000</code>)</li> <li><code>AMASS_ENGINE_PATH</code>: Path for the Engine API (default: <code>graphql</code>)</li> <li><code>AMASS_ENGINE_SCHEME</code>: Scheme for the Engine API (<code>http</code> or <code>https</code>, default: <code>http</code>)</li> </ul> <p>Database Environment Variables:</p> <ul> <li><code>AMASS_DB_USER</code>: Username for the database</li> <li><code>AMASS_DB_PASSWORD</code>: Password for the database</li> <li><code>AMASS_DB_HOST</code>: Host for the database (default: <code>localhost</code>)</li> <li><code>AMASS_DB_PORT</code>: Port for the database (default: <code>5432</code>)</li> <li><code>AMASS_DB_NAME</code>: Database name (default: <code>assetdb</code>)</li> </ul> <p>Important:</p> <ul> <li>If you set the <code>engine</code> or <code>database</code> URI in the config file, Amass will use only that value and ignore the related environment variables for that object.</li> <li>You cannot mix or merge environment variable values with a URI specified in the config for either the Engine API or the Database. For now, it is one or the other, per object.</li> </ul>"},{"location":"configuration/#transformations","title":"<code>transformations</code>","text":"<p>The <code>transformations</code> section controls how assets should be proccessed, how long results from specific transforms are considered valid (TTL), and the minimum confidence level. This can be customized per entity and transform type. </p> <ul> <li>Each transformation key is parsed as <code>&lt;from&gt;-&gt;&lt;to&gt;</code>. Amass validates these against the Open Asset Model (OAM) and ensures there are no conflicts (e.g., you can't have both <code>FQDN-&gt;ALL</code> and <code>FQDN-&gt;none</code>). You can set <code>ttl</code>, <code>confidence</code>, <code>priority</code>, and <code>exclude</code> for each transformation.</li> <li>If a transformation omits <code>ttl</code>, <code>confidence</code>, or <code>priority</code>, Amass uses the values from <code>default_transform_values</code> in <code>options</code>.</li> <li>You can add or modify transformations in Go by editing the <code>Config.Transformations</code> map and calling validation methods.</li> </ul> <p>Supported Format:</p> <ul> <li><code>&lt;from&gt;-&gt;&lt;to&gt;</code> (object):</li> <li><code>ttl</code> (int, optional): Time-to-live for this transformation result, in minutes.</li> <li><code>confidence</code> (int, optional): Confidence value for this transformation (percentage).</li> <li><code>priority</code> (int, optional): Priority value for this transformation.</li> <li><code>exclude</code> (array of strings, optional): List of transforms to exclude. In this example, the TTL and confidence settings will only apply when the transformation is handled by the plugin named <code>myplugin</code>.</li> </ul> <p>Tip: Use <code>ALL</code> as the transform to apply the rule to all transforms for a given entity.</p> <p>Example:</p> <pre><code>transformations:\n  FQDN-&gt;DNS:\n    ttl: 1440\n  FQDN-&gt;DomainRecord:\n    ttl: 43200\n  Account-&gt;ALL:\n    ttl: 1080\n</code></pre> <p>Granular Example (per plugin): Amass handles plugin level granularity. You can specify transformation rules as granularly as you want\u2014even down to a single plugin. If you use the plugin's name as the <code>&lt;to&gt;</code> in your <code>&lt;from&gt;-&gt;&lt;to&gt;</code> transformation key, Amass will apply that rule only for that plugin. This enables highly targeted configuration and fine-grained control over how results are handled for each plugin.</p> <pre><code>transformations:\n  FQDN-&gt;myplugin:\n    ttl: 60\n    confidence: 90\n</code></pre> <p>For more details, see the example configuration files and the Amass documentation.</p>"},{"location":"configuration/#how-amass-loads-configuration","title":"How Amass Loads Configuration","text":"<p>Amass supports flexible configuration loading. allowing you to control settings via YAML files, environment variables, and programmatic overrides.</p>"},{"location":"configuration/#configuration-loading-order","title":"Configuration Loading Order","text":"<ol> <li>Explicit file: If you specify a config file path (e.g., with <code>-config</code>), it is loaded first.</li> <li>Environment variable: If the <code>AMASS_CONFIG</code> environment variable is set, its path is used.</li> <li>Default locations: Amass looks for <code>config.yaml</code> in the output directory (usually <code>~/.config/amass/</code>) or <code>/etc/amass/config.yaml</code> on Linux.</li> </ol>"},{"location":"configuration/#programmatic-configuration","title":"Programmatic Configuration","text":"<p>If you use Amass as a Go library, you can construct a <code>Config</code> object directly in code, set fields, and call methods like <code>LoadSettings()</code> or <code>AcquireConfig()</code> to merge YAML and programmatic settings.</p>"},{"location":"configuration/#advanced-configuration-details","title":"Advanced Configuration Details","text":"<p>Amass uses Go interfaces and flexible types in its configuration structs to allow for advanced and custom settings:</p> <ul> <li> <p>Flexible Options: The <code>options</code> section in YAML is loaded into a <code>map[string]interface{}</code>. This means you can add arbitrary keys and values\u2014even ones not officially documented. If Amass has a loader for your option (like <code>active</code>, <code>rigid_boundaries</code>, or future features), it will be parsed and used (e.g., check out the code for loading the <code>database</code> option). Otherwise, you can access these values programmatically if you use Amass as a library.</p> </li> <li> <p>Scope Parsing: The <code>Scope</code> struct uses fields like <code>PortsRaw []interface{}</code> so you can specify ports as single values, lists, or ranges in YAML. Amass normalizes these internally, so you have flexibility in how you define scope.</p> </li> <li> <p>Loader Functions: After deserialization, Amass runs a series of loader functions to process, validate, and normalize settings. This means you can experiment with new options or override behaviors by adding new keys to your YAML, as long as you handle them in your own fork or via the Go API.</p> </li> <li> <p>Programmatic Access: If you use Amass as a Go library, you can read, modify, or extend the config structs directly, including any custom or experimental options you add to your YAML.</p> </li> </ul> <p>Tip: This flexibility is powerful for advanced users and developers, but be careful\u2014unsupported or misspelled options may be silently ignored unless handled in code.</p>"},{"location":"configuration/data_sources/","title":"Amass Data Sources Configuration","text":"<p>This document explains how to configure external data sources for Amass using the <code>datasources.yaml</code> file. Data sources provide additional information for enumeration and require credentials for access.</p> <p>Note: Some data sources require a paid subscription or API key to access advanced features. Using paid or premium data sources can unlock extra capabilities and may provide a better experience for the Amass engine, including more comprehensive results and faster queries.</p>"},{"location":"configuration/data_sources/#data-sources-configuration-datasourcesyaml","title":"Data Sources Configuration: <code>datasources.yaml</code>","text":"<p>This file defines which external data sources Amass will use and their credentials.</p>"},{"location":"configuration/data_sources/#global_options","title":"<code>global_options</code>","text":"<p>Set global defaults for all data sources.</p> <ul> <li><code>minimum_ttl</code>: Default TTL for data source results (in minutes).</li> </ul> <p>Format:</p> <pre><code># these are the global options related to data sources.\nglobal_options:\n# minimum_ttl is the default used when datasources don't specify a larger ttl value.\n  minimum_ttl: 1440 #one day\n</code></pre>"},{"location":"configuration/data_sources/#datasources","title":"<code>datasources</code>","text":"<p>The <code>datasources</code> section is a list of external data sources Amass will use. Each entry can specify credentials, TTL, and multiple accounts. All fields are optional except for <code>name</code>.</p> <p>Supported Fields:</p> <ul> <li><code>name</code> (string, required): The name of the data source (e.g., <code>Shodan</code>, <code>CIRCL</code>).</li> <li><code>ttl</code> (int, optional): Time-to-live for results from this data source, in minutes. If omitted, the global minimum TTL is used.</li> <li><code>creds</code> (object, optional): A map of account names to credential sets. You can name the account key anything (e.g., <code>account</code>, <code>personal</code>, <code>work</code>, <code>default</code>), which helps organize multiple credential sets for the same data source. Amass will accept any key name here.</li> <li><code>&lt;account&gt;</code> (object): The account name (arbitrary string) for this credential set.<ul> <li><code>apikey</code> (string, optional): API key for the data source.</li> <li><code>username</code> (string, optional): Username for authentication.</li> <li><code>password</code> (string, optional): Password for authentication.</li> <li><code>secret</code> (string, optional): Secret value for authentication (used by some APIs).</li> </ul> </li> </ul> <p>Format:</p> <pre><code>datasources:\n  - name: &lt;DataSourceName&gt;\n    ttl: &lt;minutes&gt; # optional\n    creds:\n      &lt;account&gt;: # You can name this key anything (e.g., 'account', 'personal', 'work')\n        apikey: &lt;your_api_key&gt;\n        username: &lt;your_username&gt;\n        password: &lt;your_password&gt;\n        secret: &lt;your_secret&gt;\n</code></pre> <p>Example:</p> <pre><code>datasources:\n  - name: Shodan\n    ttl: 10080\n    creds:\n      account:\n        apikey: YOUR_SHODAN_API_KEY\n  - name: CIRCL\n    creds:\n      account:\n        username: YOUR_USERNAME\n        password: YOUR_PASSWORD\n</code></pre>"},{"location":"configuration/data_sources/#tips","title":"Tips","text":"<ul> <li>Comment or uncomment sections in YAML to enable/disable features.</li> <li>Use relative paths for wordlists and data source files for portability.</li> <li>Always keep your API keys and credentials secure.</li> </ul> <p>For more details, see the example configuration files and the Amass documentation.</p>"},{"location":"configuration/data_sources/#advanced-configuration-details","title":"Advanced Configuration Details","text":"<ul> <li>Custom Data Source Credentials: In the data source config, credentials are stored as a map (<code>map[string]*Credentials</code>). This allows you to define multiple credential sets per data source in YAML, and Amass will deserialize them into Go structs. You can add new credential types as needed for custom integrations.</li> </ul> <p>Tip: This flexibility is powerful for advanced users and developers, but be careful\u2014unsupported or misspelled options may be silently ignored unless handled in code.</p>"},{"location":"configuration/transformations/","title":"Asset Transformations Configuration","text":"<p>The <code>transformations</code> section of the OWASP Amass <code>config.yaml</code> file is one of the most powerful parts of the collection engine. It controls how data flows through the system, defines which types of assets can be transformed into others, and sets constraints like freshness (TTL), trustworthiness (confidence), and urgency (priority) on those transformations.</p> <p>This section empowers users to customize and optimize their data collection workflows based on their goals, risk tolerance, and update requirements.</p>"},{"location":"configuration/transformations/#what-are-transformations","title":"What Are Transformations?","text":"<p>In Amass, the data collection process is modeled as a pipeline of asset transformations. Each asset observed (like an IP address, domain, ASN, etc.) can trigger handlers, which attempt to enrich, correlate, or expand on that asset type by transforming it into new assets.</p> <p>For example: - A discovered <code>FQDN</code> might trigger a handler to look up its DNS records (<code>FQDN -&gt; DNS</code>) - A known <code>AutonomousSystem</code> could be transformed into its RDAP metadata (<code>AutonomousSystem -&gt; RDAP</code>) - A <code>Product</code> seen on a web service might lead to discovery of its <code>ProductRelease</code> metadata</p> <p>The <code>transformations</code> section defines: - Which transformations are allowed - How frequently each transformation should be retried (<code>ttl</code>) - How much confidence the system should have in the results (<code>confidence</code>) - How important the transformation is (<code>priority</code>)</p>"},{"location":"configuration/transformations/#configuration-overview","title":"Configuration Overview","text":"<p>Here's the structure of a typical configuration:</p> <pre><code>options:\n  default_transform_values:\n    ttl: 1440         # in minutes (default is 1 day)\n    confidence: 50    # default confidence threshold (0\u2013100%)\n    priority: 5       # default priority level (1=low, 10=high)\n\ntransformations:\n  FQDN-&gt;DNS:\n    ttl: 1440\n  AutonomousSystem-&gt;RDAP:\n    ttl: 43200        # 30 days\n  Identifier-&gt;GLEIF:\n    ttl: 43200\n  Product-&gt;ALL:\n    ttl: 10080        # 7 days\n</code></pre>"},{"location":"configuration/transformations/#default_transform_values","title":"<code>default_transform_values</code>","text":"<p>This section defines fallback values used when no custom values are given for a transformation.</p> Key Type Description <code>ttl</code> integer Time-to-live (in minutes) for data freshness. If expired, the data will be fetched again from the source instead of reused. <code>confidence</code> integer Minimum confidence (0\u2013100%) required to accept the result of a transformation. <code>priority</code> integer Priority score (1=lowest, 10=highest) that may influence queue ordering in some future extensions."},{"location":"configuration/transformations/#defining-transformations","title":"Defining Transformations","text":"<p>Each transformation follows this format:</p> <pre><code>&lt;SourceAssetType&gt;-&gt;&lt;TargetAssetType|Plugin Name&gt;:\n  ttl: &lt;int&gt;           # Optional override of default\n  confidence: &lt;int&gt;    # Optional override\n  priority: &lt;int&gt;      # Optional override\n</code></pre> <p>Use <code>-&gt;ALL</code> as a wildcard to enable all available transformations from a given source asset type.</p> <p>Example:</p> <pre><code>FQDN-&gt;ALL:\n</code></pre> <p>This enables all known FQDN transformations (e.g., <code>FQDN-&gt;IPAddress</code>, <code>FQDN-&gt;DomainRecord</code>, etc.).</p>"},{"location":"configuration/transformations/#example-config-breakdown","title":"Example Config Breakdown","text":"<pre><code>transformations:\n  FQDN-&gt;DNS:\n    ttl: 1440  # 1 day\n  FQDN-&gt;DomainRecord:\n    ttl: 43200  # 30 days\n  IPAddress-&gt;ALL:\n  TLSCertificate-&gt;ALL:\n    ttl: 10080  # 7 days\n</code></pre>"},{"location":"configuration/transformations/#explanation","title":"Explanation:","text":"<ul> <li>FQDN-&gt;DNS: Amass will try to resolve DNS for fully qualified domain names once per day.</li> <li>FQDN-&gt;DomainRecord: Domain ownership records are more stable, so these are refreshed every 30 days.</li> <li>IPAddress-&gt;ALL: All available transformations for IPs are enabled (e.g., geolocation, RDAP, reverse DNS).</li> <li>TLSCertificate-&gt;ALL: Certificates fetched from services are checked weekly.</li> </ul>"},{"location":"configuration/transformations/#what-is-ttl","title":"What is <code>ttl</code>?","text":"<p><code>ttl</code> (Time To Live) controls how often a transformation can be retried from the original source:</p> <ul> <li>If the data is still fresh (within TTL), Amass will use the previously stored result from the database.</li> <li>If the TTL has expired, the handler will attempt to re-run the transformation, such as querying the data source again.</li> </ul> <p>This ensures the system avoids unnecessary queries and controls bandwidth/load.</p>"},{"location":"configuration/transformations/#what-is-confidence","title":"What is <code>confidence</code>?","text":"<p><code>confidence</code> helps Amass filter out noisy or speculative results. Some plugins or handlers may return results with associated confidence scores.</p> <ul> <li>If a handler returns a transformation with <code>confidence: 40</code>, and your threshold is <code>50</code>, it will be ignored.</li> <li>Use this to reduce false positives or to tune behavior in environments where high data quality is crucial.</li> </ul>"},{"location":"configuration/transformations/#what-is-priority","title":"What is <code>priority</code>?","text":"<p>The <code>priority</code> value is a relative score (1\u201310) that can help inform which transformations are more important. While not strictly enforced in the engine today, this allows future prioritization of more urgent or valuable tasks\u2014like scanning attack surfaces or refreshing high-risk domains.</p>"},{"location":"configuration/transformations/#tips-and-best-practices","title":"Tips and Best Practices","text":"<ul> <li>\u2705 Use <code>-&gt;ALL</code> to simplify enabling all known transformations for an asset type.</li> <li>\u2705 Use higher TTLs (e.g., 30+ days) for records that rarely change (e.g., <code>RDAP</code>, <code>GLEIF</code>, <code>DomainRecord</code>).</li> <li>\u26a0\ufe0f Keep <code>ttl</code> low (e.g., 60\u20131440 min) for time-sensitive records like DNS, services, or IP geolocation.</li> <li>\u2705 Set <code>confidence</code> thresholds higher (e.g., 70\u201390) in production pipelines where trust is critical.</li> <li>\u2705 Consider adjusting <code>priority</code> for critical infrastructure or high-value assets.</li> </ul>"},{"location":"configuration/transformations/#summary","title":"Summary","text":"<p>The <code>transformations</code> section of the Amass configuration lets users shape the intelligence collection process, optimize for freshness vs. efficiency, and control data quality through TTLs and confidence scoring.</p> <p>It is a key part of how Amass turns passive and active discoveries into structured asset graphs that can drive attack surface monitoring, red teaming, or asset attribution.</p> <p>For a full list of supported asset types, refer to the Open Asset Model documentation.</p> <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/","title":"Open Asset Model","text":"<p>The Amass Project's Open Asset Model redefines the understanding of an attack surface. Shifting the paradigm away from narrow, internet infrastructure-focused collection, the OAM broadens its scope to include both physical and digital assets. This approach delivers a realistic view of assets and their lesser-known associations, utilizing adversarial tactics to gain visibility into potential risks and attack vectors that might otherwise be overlooked.</p>"},{"location":"open_asset_model/#overview","title":"// Overview","text":"<ul> <li>Deep Attack Surface Intelligence: Identifies both physical and digital assets, moving beyond IT infrastructure.</li> <li>Standardized Asset Framework: Ensures consistency in asset classification, facilitating efficient data exchange and streamlined analysis.</li> <li>Cyclic Discovery: Recursively approaches data exploration, leveraging each finding to dynamically expand the target scope.</li> <li>Community-Driven: Developed and continuously refined by security experts within the OWASP Amass ecosystem.</li> <li>Risk Mapping: Exposes hidden attack vectors by mapping asset relationships and tracking their changes over time.</li> </ul>"},{"location":"open_asset_model/#explore-oam-asset-types","title":"Explore OAM Asset Types","text":"<ul> <li> <p> Account</p> <p>Collect usernames, account types, and related attributes to track exposed user accounts</p> <p> Learn more</p> </li> <li> <p> Domain Record</p> <p>Gather domain insights, including Whois and registrar details</p> <p> Learn more</p> </li> <li> <p> Contact Record</p> <p>Link email addresses, phone numbers, and locations to discovered entities</p> <p> Learn more</p> </li> <li> <p> FQDN</p> <p>Record domain resolutions, DNS records, and associated metadata</p> <p> Learn more</p> </li> <li> <p> File</p> <p>Capture file names and hashes to analyze digital artifacts</p> <p> Learn more</p> </li> <li> <p> Funds Transfer</p> <p>Identify bank accounts, payment systems, and transaction details</p> <p> Learn more</p> </li> <li> <p> Identifier</p> <p>Track unique IDs, references, or numerical values </p> <p> Learn more</p> </li> <li> <p> IP Address</p> <p>Discover IPs, subnets, and routing structures to uncover key infrastructure</p> <p> Learn more</p> </li> <li> <p> Organization</p> <p>Uncover entity designations, locations, and operational details to expose connections</p> <p> Learn more</p> </li> <li> <p> Person</p> <p>Collect names, locations, and attributes to build individual profiles </p> <p> Learn more</p> </li> <li> <p> Product</p> <p>Identify online services, cloud providers, and software ecosystems </p> <p> Learn more</p> </li> <li> <p> TLS Certificate</p> <p>Gather SSL/TLS certificate details, issuers, and expiration dates for asset verification</p> <p> Learn more</p> </li> <li> <p> URL</p> <p>Log web addresses and associated content to track online presence</p> <p> Learn more</p> </li> </ul>"},{"location":"open_asset_model/assets/","title":"Assets","text":"<p>In the OWASP Open Asset Model, an asset represents any discrete, observable element in the external environment of an organization that holds security or operational relevance. Assets can range from technical resources like domain names and IP addresses to organizational constructs such as legal entities and brand names. What makes assets central to the model is that they serve as the primary objects of analysis\u2014entities that can be discovered, attributed, linked, enriched, and ultimately assessed for risk. Each asset is uniquely identified, carries contextual metadata such as confidence and source of discovery, and participates in a web of typed relationships that form a dynamic, queryable graph of an organization's external footprint.</p>"},{"location":"open_asset_model/assets/#why-assets-are-the-firstclass-citizens","title":"Why Assets Are the First\u2011Class Citizens","text":"<p>In the Open Asset Model (OAM), assets are the atomic units of knowledge that describe an organization\u2019s externally observable footprint.  Every other class in the model\u2014attributes, properties, relations\u2014exists to enrich or contextualize an asset.  By treating everything discoverable (from a DNS name to a cloud storage bucket) as an asset, we gain three strategic advantages:</p> <ol> <li>Uniform Vocabulary \u2013 Analysts, tools, and automation pipelines can exchange data without bespoke translation layers.</li> <li>Composable Reasoning \u2013 Graph analytics, enrichment, and risk scoring can be applied consistently because every node shares a common set of metadata fields (<code>id</code>, <code>confidence</code>, <code>source</code> \u2026).</li> <li>Auditability \u2013 Each asset retains a pointer to discovery provenance, making it trivial to reproduce findings or trace errors.</li> </ol>"},{"location":"open_asset_model/assets/#asset-definition","title":"Asset Definition","text":"<p>Asset: An identifiable object\u2014digital, network, or legal\u2014that an organization owns, operates, or relies on and that can be observed from outside the security perimeter.</p> <p>An asset is not just a label; it is a self\u2011contained document that answers three questions:</p> <ol> <li>What is it?    A type\u2011specific schema (e.g., FQDN, TLSCertificate, AutonomousSystem).</li> <li>Where did it come from?    One or more DiscoveryMethods with timestamps and collection method.</li> <li>How certain are we?    A confidence score that downstream pipelines can use to gate actions.</li> </ol>"},{"location":"open_asset_model/assets/#asset-taxonomy-partial","title":"Asset Taxonomy (Partial)","text":"Category Example Asset Types Typical Sources Network &amp; DNS <code>FQDN</code>, <code>IPAddress</code>, <code>AutonomousSystem</code>, <code>Netblock</code> DNS enumeration, passive DNS, RDAP Products &amp; Services <code>Product</code>, <code>ProductRelease</code>, <code>Service</code> DNS, Port scanning, banner grabbing Organization <code>Organization</code>, <code>Account</code>, <code>FundsTransfer</code> GLEIF, business registries Identity &amp; Contact <code>ContactRecord</code>, <code>Identifier</code>, <code>Phone</code>, <code>Location</code> TLS certs, WHOIS, RDAP, websites Cryptographic <code>TLSCertificate</code> CT logs, public websites <p>This list is intentionally open\u2011ended; community pull requests routinely add new asset types as technology evolves.</p>"},{"location":"open_asset_model/assets/#core-asset-attributes","title":"Core Asset Attributes","text":"<p>Every asset embeds a minimal yet powerful set of metadata:</p> <pre><code>type: \"FQDN\"\ncreated_at: \"2025-06-11\"\nlast_seen: \"2025-06-27\"\n</code></pre> <p>Additional attributes are type\u2011specific\u2014for instance, an <code>IPAddress</code> has the address field, while an <code>Organization</code> stores jurisdiction and registration numbers.</p>"},{"location":"open_asset_model/assets/#relationships-building-the-graph","title":"Relationships: Building the Graph","text":"<p>Assets rarely exist in isolation.  The model expresses typed, directed edges such as:</p> <ul> <li><code>dns_record</code> \u2013 FQDN \u2192 IPAddress</li> <li><code>contains</code> \u2013 Netblock \u2192 IPAddress</li> <li><code>announces</code> \u2013 AutonomousSystem \u2192 Netblock</li> <li><code>registration</code> \u2013 Netblock \u2192 IPNetRecord</li> </ul> <p>These links turn the asset collection into a searchable property graph, enabling path\u2011finding queries like \u201cWhich IP ranges host domains that roll up to Acme Corp\u2019s legal entities?\u201d</p>"},{"location":"open_asset_model/assets/#lifecycle-in-the-discovery-pipeline","title":"Lifecycle in the Discovery Pipeline","text":"<pre><code>flowchart LR\n  subgraph Discovery Engine\n    A[Raw OSINT] --&gt; B(Parse &amp; Normalize)\n    B --&gt; C(Create Asset)\n    C --&gt;|Deduplicate| D[Graph DB]\n    D --&gt; E(Enrichment / Risk Scoring)\n  end</code></pre> <ol> <li>Parse &amp; Normalize \u2013 A discovery plugin converts evidence into the canonical asset schema.</li> <li>Create Asset \u2013 New or updated asset documents are emitted with provenance.</li> <li>Deduplicate \u2013 The graph layer merges assets sharing the same unique <code>key</code>.</li> <li>Enrichment \u2013 Plugins append properties, such as alternative names, vulnerabilities, etc.</li> <li>Analytics &amp; Export \u2013 Downstream tools run path queries, generate reports, or feed alerting pipelines.</li> </ol>"},{"location":"open_asset_model/assets/#quick-example-from-evidence-to-asset","title":"Quick Example: From Evidence to Asset","text":"<p>Imagine Amass extracts the email address security@example.com from the footer of www.example.com:</p> <pre><code>Source URL: https://www.example.com\nEvidence: \"Contact us at security@example.com for vulnerabilities.\"\n</code></pre> <p>The web\u00a0scraper module produces:</p> <pre><code>type: \"ContactRecord\"\ndiscovered_at: \"http://www.example.com\"\ncreated_at: \"2025-06-28\"\nlast_seen: \"2025-06-28\"\n</code></pre> <p>An edge will be created between the ContactRecord and Identifier containing the email address (security@example.com). Future encounters with the same email address will reference the same asset in the graph.</p>"},{"location":"open_asset_model/assets/#where-to-go-next","title":"Where to Go Next","text":"<p>Take a look at the pages where details are provided for each asset type.</p> <ul> <li>Relations \u2013 Overview of Relations in the Open Asset Model.</li> <li>Properties - Overview of a Property in the Open Asset Model.</li> <li>Triples \u2013 Querying the graph with SPARQL\u2011inspired triples.</li> <li>Assoc Tool \u2013 Using the command-line tool that queries the graph.</li> </ul> <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/assets/account/","title":"Account","text":"<p>The <code>Account</code> asset type in the OWASP Open Asset Model (OAM) represents a digital or financial account associated with an organization, user, or service. This may include cloud service accounts, financial accounts, email or user login handles, and other forms of identity-linked accounts that hold operational, monetary, or access significance.</p> <p>Each <code>Account</code> asset includes structured metadata describing its identity and lifecycle:</p> <ul> <li>ID \u2013 A globally unique identifier for the account within the graph.</li> <li>Type \u2013 The kind of account represented (e.g., <code>email</code>, <code>bank</code>, <code>cloud</code>, <code>user</code>, <code>subscription</code>).</li> <li>Username \u2013 The login handle, screen name, or identifier tied to the account (e.g., <code>admin@corp.com</code>, <code>acme-billing</code>).</li> <li>Account Number \u2013 An optional unique number assigned to the account (e.g., bank account or customer ID).</li> <li>Balance \u2013 Optional numeric value representing a monetary balance or credit (used primarily for financial contexts).</li> <li> <p>Active \u2013 A boolean indicating whether the account is currently in use or retired.</p> </li> <li> <p>Definition: An identity-linked asset that represents a digital, user, or financial account used to access or control resources across infrastructure or service environments.</p> </li> <li> <p>Purpose: The Account asset plays a vital role in representing non-infrastructure access points\u2014especially those tied to identity, privilege, and control.</p> </li> </ul> <p>Key use cases include:</p> <ul> <li>Credential Discovery \u2013 Modeling usernames or accounts found in source code, breach data, or service responses.</li> <li>Privilege Mapping \u2013 Associating accounts with specific services or roles in cloud or SaaS environments.</li> <li>Exposure Attribution \u2013 Tracing exposed keys, billing accounts, or cloud identities back to organizations.</li> <li>Operational Monitoring \u2013 Tracking stale or inactive accounts that may indicate shadow IT or abandoned assets.</li> <li>Financial Context \u2013 Enriching infrastructure or access graphs with business-relevant metadata like balances or customer IDs.</li> </ul> <p>As modern infrastructure increasingly relies on cloud identities, tokens, and user-managed accounts, this asset type ensures these components are treated with the same rigor and visibility as traditional network assets.</p> <ul> <li> <p>Design Choice: The design of the Account asset type is intentionally minimal, yet extensible:</p> </li> <li> <p>Type-Driven Classification \u2013 The account_type field enables generalized modeling (e.g., cloud, user, bank) while allowing tooling to define additional specificity as needed.</p> </li> <li>Dual-Use Fields \u2013 By including both username and account_number, the model supports both identity-driven and numerically indexed account types (e.g., login-based vs. customer-ID-based).</li> <li>Support for Financial Metadata \u2013 The balance field anticipates modeling of assets where monetary value or usage limits play a role (e.g., billing accounts or quota-based services).</li> <li>Lifecycle Awareness \u2013 The active boolean enables visibility into the operational state of the account, useful for spotting dormant, disabled, or legacy identities.</li> </ul> <p>This flexible schema supports ingestion from diverse data sources including cloud control planes, threat intelligence feeds, credential scanning tools, and financial systems, making the Account a powerful linking node between people, services, and infrastructure.</p> <p>Modeling accounts as first-class assets enables reasoning about identity exposure, credential misuse, service abuse, and privilege relationships. Whether discovered via configuration files, leaked credentials, service enumeration, or third-party intelligence, <code>Account</code> assets play a key role in mapping the operational footprint and associated risks of an organization.</p> <p>Account assets can be linked to services, users, or organizations through relations, enabling workflows such as credential exposure detection, service-to-user mapping, or analysis of abandoned or inactive accounts across cloud providers or infrastructure environments.</p> <p>Accounts are identity-centric primitives that enrich the graph\u2019s ability to reason about control, access, and exposure across digital systems.</p>"},{"location":"open_asset_model/assets/account/#account-attributes","title":"Account Attributes","text":"Attributes Type Required Description <code>unique_id</code> string Unique identifier for the account within the model <code>account_type</code> string Classification of the account (e.g., <code>cloud</code>, <code>bank</code>, <code>user</code>) <code>username</code> string Login name, email, or screen name associated with the account <code>account_number</code> string Optional numeric or alphanumeric account ID (e.g., <code>acct-1234</code>) <code>balance</code> float Optional financial or credit balance <code>active</code> boolean Whether the account is currently active"},{"location":"open_asset_model/assets/account/#account-properties","title":"Account Properties","text":"Property Type Property Name Description <code>SimpleProperty</code> <code>last_monitored</code> Tracks when a data source was last queried regarding this Account <code>SourceProperty</code> Source Plugin Name Indicates that the specified data source discovered this Account"},{"location":"open_asset_model/assets/account/#account-outgoing-relations","title":"Account Outgoing Relations","text":"<pre><code>graph TD\nacct[\"Account\"]\nident[\"Identifier\"]\nidRel@{ shape: braces, label: \"id\" }\nacct --o idRel\nidRel --&gt; ident\n\norg[\"Organization\"]\nperson[\"Person\"]\nuser@{ shape: braces, label: \"user\" }\nacct --o user\nuser --&gt; org\nuser --&gt; person</code></pre> Relation Type Relation Label Target Assets Description <code>SimpleRelation</code> <code>id</code> <code>Identifier</code> Links the account to other discovered identifiers <code>SimpleRelation</code> <code>user</code> <code>Organization</code>, <code>Person</code> Links the account to known users that have access <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/assets/autnum_record/","title":"AutnumRecord","text":"<p>The AutnumRecord asset type in the OWASP Open Asset Model (OAM) represents authoritative registration data for an Autonomous System (AS), as provided by Regional Internet Registries (RIRs) via RDAP or legacy WHOIS. This includes ownership and operational metadata related to an Autonomous System Number (ASN)\u2014the numeric identifier used in BGP routing.</p> <ul> <li> <p>Definition: An <code>AutnumRecord</code> contains parsed RDAP registration data about an ASN, including its number, handle, registered name, lifecycle dates, and optional status flags. It also includes the raw source text for auditing or secondary parsing.</p> </li> <li> <p>Purpose: Modeling AS registration data as a distinct asset allows analysts to pivot from infrastructure to attribution, understand who controls internet routing authority, and detect AS-level behavior changes (e.g., hijacks, acquisitions, multi-homing). It supports graph queries like \u201cwhich ASNs are linked to a given organization?\u201d or \u201cwhat netblocks does a registered AS announce?\u201d</p> </li> <li> <p>Design Choice: Like <code>DomainRecord</code>, the <code>AutnumRecord</code> includes both structured and unstructured fields, preserving original RDAP/WHOIS responses while enabling consistent graph modeling. Fields are optimized for operational monitoring and attribution while remaining tolerant to registry variability.</p> </li> </ul> <p>The AutnumRecord asset type enables attribution, tracking, and auditing of ASNs across the global routing system, serving as a critical bridge between technical infrastructure and organizational ownership.</p>"},{"location":"open_asset_model/assets/autnum_record/#autnumrecord-attributes","title":"AutnumRecord Attributes","text":"Attributes Type Required Description <code>number</code> integer Autonomous System Number (ASN) <code>handle</code> string Registry-specific handle (e.g., <code>AS15169</code>) <code>name</code> string Name of the AS as registered (e.g., <code>GOOGLE</code>) <code>created_date</code> string (ISO date) Date the ASN was first registered <code>updated_date</code> string (ISO date) Last modification date of the registration <code>status</code> array of strings Optional status flags <code>whois_server</code> string RDAP/WHOIS server that served the registration data <code>raw</code> string Original registration record text or RDAP JSON"},{"location":"open_asset_model/assets/autnum_record/#autnumrecord-properties","title":"AutnumRecord Properties","text":"Property Type Property Name Description <code>SimpleProperty</code> <code>last_monitored</code> Timestamp of the last time this record was updated or verified <code>SourceProperty</code> Source Plugin Name Indicates which data source retrieved the registration"},{"location":"open_asset_model/assets/autnum_record/#autnumrecord-outgoing-relations","title":"AutnumRecord Outgoing Relations","text":"<pre><code>graph TD\nautrec[\"AutnumRecord\"]\nwhois[\"FQDN\"]\nwhoisRel@{ shape: braces, label: \"whois_server\" }\nautrec --o whoisRel\nwhoisRel --&gt; whois\n\ncontact[\"ContactRecord\"]\ncontactrel@{ shape: braces, label: \"registrant\nadmin_contact\nabuse_contact\ntechnical_contact\" }\nautrec --o contactrel\ncontactrel --&gt; contact\n\nurl[\"URL\"]\nurlRel@{ shape: braces, label: \"rdap_url\" }\nautrec --o urlRel\nurlRel --&gt; url</code></pre> Relation Type Relation Label Target Assets Description <code>SimpleRelation</code> <code>whois_server</code> <code>FQDN</code> Links the ASN registration information with the correct WHOIS server <code>SimpleRelation</code> <code>registrant</code> <code>ContactRecord</code> Links the ASN registration information with registrant contact information <code>SimpleRelation</code> <code>admin_contact</code> <code>ContactRecord</code> Links the ASN registration information with admin contact information <code>SimpleRelation</code> <code>abuse_contact</code> <code>ContactRecord</code> Links the ASN registration information with contact information for abuse reporting <code>SimpleRelation</code> <code>technical_contact</code> <code>ContactRecord</code> Links the ASN registration information with contact information of technical personnel <code>SimpleRelation</code> <code>rdap_url</code> <code>URL</code> Links the ASN registration information to its associated web page <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/assets/autonomous_system/","title":"AutonomousSystem","text":"<p>The <code>AutonomousSystem</code> is an asset type defined in the OWASP Open Asset Model (OAM) that represents a unique network entity on the global Internet, identified by an Autonomous System Number (ASN). These systems are managed by organizations\u2014such as ISPs, cloud providers, enterprises, and academic institutions\u2014that control a block of IP address space and operate a distinct routing policy.</p> <p>Autonomous Systems are foundational elements of the Internet\u2019s infrastructure. In the context of external attack surface management (EASM), they serve as a key attribution point between an organization and the IP address ranges it announces and operates. By modeling these as first-class assets, the OAM enables analysts and automation to reason about ownership, geography, provider relationships, and changes in network footprint.</p> <p>Each <code>AutonomousSystem</code> asset includes:</p> <ul> <li>ASN \u2013 The unique numeric identifier assigned by a regional internet registry (RIR), such as <code>15169</code>.</li> </ul> <p>The <code>AutonomousSystem</code> asset is often used as a root for discovering related IP ranges (<code>NetBlock</code> assets), establishing legal entity associations, or monitoring changes in Internet-facing infrastructure. It is also useful in tracking adversary infrastructure, attributing threat activity, and resolving the ownership of obscure or third-party hosted assets.</p>"},{"location":"open_asset_model/assets/autonomous_system/#autonomoussystem-attributes","title":"AutonomousSystem Attributes","text":"Attributes Type Required Description <code>number</code> number The unique Autonomous System Number assigned to the network"},{"location":"open_asset_model/assets/autonomous_system/#autonomoussystem-properties","title":"AutonomousSystem Properties","text":"Property Type Property Name Description <code>SimpleProperty</code> <code>last_monitored</code> Tracks when a data source was last queried regarding this AutonomousSystem <code>SourceProperty</code> Source Plugin Name Indicates that the specified data source discovered this AutonomousSystem"},{"location":"open_asset_model/assets/autonomous_system/#autonomoussystem-outgoing-relations","title":"AutonomousSystem Outgoing Relations","text":"<pre><code>graph TD\nasn[\"AutonomousSystem\"]\nnetblock[\"Netblock (e.g. 72.237.4.0/24)\"]\nannounces@{ shape: braces, label: \"announces\"}\nasn --o announces\nannounces --&gt; netblock\n\nautnum[\"AutnumRecord\"]\nregrel@{ shape: braces, label: \"registration\"}\nasn --o regrel\nregrel --&gt; autnum</code></pre> Relation Type Relation Label Target Assets Description <code>SimpleRelation</code> <code>announces</code> <code>Netblock</code> Links an IPAddress to its DNS name used in PTR records <code>SimpleRelation</code> <code>registration</code> <code>AutnumRecord</code> Links a ASN to its associated registration data <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/assets/contact_record/","title":"ContactRecord","text":"<p>The ContactRecord asset serves as a connective entity that maintains a reliable audit trail of where contact information was discovered during the attack surface intelligence collection process. It plays a critical role in ensuring both flexibility and consistency within the Open Asset Model, as it is uniformly applied wherever contact details are identified\u2014regardless of the specific type of contact information uncovered. Because such information is often found in varied groupings, it's important to preserve the context in which each piece was associated. The ContactRecord makes this possible by capturing and storing the discovered contact data alongside its source location, maintaining their relationship within the model.</p>"},{"location":"open_asset_model/assets/contact_record/#contactrecord-attributes","title":"ContactRecord Attributes","text":"Attributes Type Required Description <code>discovered_at</code> string Unique URL or path to the contact information"},{"location":"open_asset_model/assets/contact_record/#contactrecord-properties","title":"ContactRecord Properties","text":"Property Type Property Name Description <code>SimpleProperty</code> <code>last_monitored</code> Tracks when a data source was last queried regarding this ContactRecord <code>SourceProperty</code> Source Plugin Name Indicates that the specified data source discovered this ContactRecord"},{"location":"open_asset_model/assets/contact_record/#contactrecord-outgoing-relations","title":"ContactRecord Outgoing Relations","text":"<pre><code>graph TD\ncontact[\"ContactRecord\"]\nfqdn[\"FQDN\"]\n\nsimple1@{ shape: braces, label: \"fqdn\"}\ncontact --o simple1\nsimple1 --&gt; fqdn\n\nid[\"Identifier\"]\nsimple2@{ shape: braces, label: \"id\"}\ncontact --o simple2\nsimple2 --&gt; id\n\norg[\"Organization\"]\nsimple3@{ shape: braces, label: \"organization\"}\ncontact --o simple3\nsimple3 --&gt; org\n\nperson[\"Person\"]\nsimple4@{ shape: braces, label: \"person\"}\ncontact --o simple4\nsimple4 --&gt; person\n\nphone[\"Phone\"]\nsimple5@{ shape: braces, label: \"phone\"}\ncontact --o simple5\nsimple5 --&gt; phone\n\nurl[\"URL\"]\nsimple6@{ shape: braces, label: \"url\"}\ncontact --o simple6\nsimple6 --&gt; url</code></pre> Relation Type Relation Label Target Assets Description <code>SimpleRelation</code> <code>fqdn</code> <code>FQDN</code> Represents a FQDN discovered in the contact information <code>SimpleRelation</code> <code>id</code> <code>Identifier</code> Represents an ID (e.g. email address) in the contact information <code>SimpleRelation</code> <code>organization</code> <code>Organization</code> Represents an organization name in the contact information <code>SimpleRelation</code> <code>person</code> <code>Person</code> Represents a person's name discovered with the contact information <code>SimpleRelation</code> <code>phone</code> <code>Phone</code> Represents a phone number in the contact information <code>SimpleRelation</code> <code>url</code> <code>URL</code> Represents an URL discovered in the contact information <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/assets/domain_record/","title":"DomainRecord","text":"<p>The DomainRecord asset type in the OWASP Open Asset Model (OAM) captures authoritative registration data for a domain name, as supplied by WHOIS, RDAP, or similar registry services. Domain registration facts are distinct from DNS\u2011resolution facts; they reveal who controls a domain, when it was created, and under what status it currently operates\u2014all of which are vital to attribution, supply\u2011chain mapping, and domain\u2011lifecycle monitoring.</p> <ul> <li> <p>Definition: A <code>DomainRecord</code> represents a single domain\u2019s registration record (raw and parsed), including key lifecycle dates, status flags, registrar details, internationalisation fields, and a DNSSEC indicator.</p> </li> <li> <p>Purpose: Modeling registration data as a first\u2011class asset allows security teams to (1) link domains to legal entities and contacts, (2) detect newly registered or expiring domains, (3) follow ownership changes over time, and (4) correlate punycode / IDN variants that could be abused for impersonation.</p> </li> <li> <p>Design Choice: Keeping both normalised fields (e.g., <code>created_date</code>) and the original <code>raw</code> text preserves machine\u2011readable consistency while ensuring full auditability.  Optional fields make the structure tolerant of incomplete WHOIS responses, and the <code>status</code> array supports the many ICANN/ccTLD state strings without schema changes.</p> </li> </ul> <p>DomainRecords provide authoritative visibility into how domain names are registered, updated, and governed, making them critical for attribution, expiration monitoring, and organizational mapping within the external asset graph.</p>"},{"location":"open_asset_model/assets/domain_record/#domainrecord-attributes","title":"DomainRecord Attributes","text":"Attributes Type Required Description <code>domain</code> string Fully\u2011qualified domain (e.g., <code>example.com</code>) <code>punycode</code> string ASCII form of an IDN (e.g., <code>xn--exmple\u2011cua.com</code>) <code>name</code> string Second\u2011level label (<code>example</code> in <code>example.com</code>) <code>extension</code> string TLD (<code>com</code>, <code>org</code>, <code>io</code>,\u202f\u2026) <code>whois_server</code> string Hostname or URL of the authoritative WHOIS server <code>created_date</code> string\u00a0(date) First registration date <code>updated_date</code> string\u00a0(date) Last modification date <code>expiration_date</code> string\u00a0(date) Scheduled expiration date <code>status</code> array\u00a0\\&lt;string&gt; Registry status codes (<code>clientTransferProhibited</code>,\u202f\u2026) <code>dnssec</code> boolean <code>true</code> if a DS record is present <code>raw</code> string Unparsed WHOIS / RDAP text for auditing <code>id</code> string Optional registry\u2011specific object ID"},{"location":"open_asset_model/assets/domain_record/#domainrecord-properties","title":"DomainRecord Properties","text":"Property Type Property Name Description <code>SimpleProperty</code> <code>last_monitored</code> Timestamp of the most recent WHOIS/RDAP pull <code>SourceProperty</code> Source Plugin Name Identifies which discovery module produced the record"},{"location":"open_asset_model/assets/domain_record/#domainrecord-outgoing-relations","title":"DomainRecord Outgoing Relations","text":"<pre><code>graph TD\ndomrec[\"DomainRecord\"]\nfqdn[\"FQDN\"]\nnames@{ shape: braces, label: \"name_server\nwhois_server\" }\ndomrec --o names\nnames --&gt; fqdn\n\ncontact[\"ContactRecord\"]\ncontactrel@{ shape: braces, label: \"registrar_contact\nregistrant_contact\nadmin_contact\ntechnical_contact\nbilling_contact\" }\ndomrec --o contactrel\ncontactrel --&gt; contact</code></pre> Relation Type Relation Label Target Assets Description <code>SimpleRelation</code> <code>name_server</code> <code>FQDN</code> Links the domain registration information with the correct DNS nameserver <code>SimpleRelation</code> <code>whois_server</code> <code>FQDN</code> Links the domain registration information with the correct WHOIS server <code>SimpleRelation</code> <code>registrar_contact</code> <code>ContactRecord</code> Links the domain registration information with registrar contact information <code>SimpleRelation</code> <code>registrant_contact</code> <code>ContactRecord</code> Links the domain registration information with registrant contact information <code>SimpleRelation</code> <code>admin_contact</code> <code>ContactRecord</code> Links the domain registration information with admin contact information <code>SimpleRelation</code> <code>technical_contact</code> <code>ContactRecord</code> Links the domain registration information with contact information of technical personnel <code>SimpleRelation</code> <code>billing_contact</code> <code>ContactRecord</code> Links the domain registration information with contact information of billing personnel <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/assets/file/","title":"File","text":"<p>The File asset type in the OWASP Open Asset Model (OAM) represents a file that is publicly accessible from the internet\u2014typically retrieved via HTTP, HTTPS, or other remote protocols. This includes web-accessible files such as JavaScript libraries, PDF documents, configuration exports, or exposed archives.</p> <ul> <li> <p>Definition: A <code>File</code> asset consists of a direct URL reference to a downloadable or inspectable file, with optional metadata such as file name and type. It serves as an abstraction for discrete, remotely hosted resources.</p> </li> <li> <p>Purpose: Exposed files often contain valuable signals for OSINT and security teams. Public-facing files may reveal application behavior (e.g., JavaScript logic), data leakage (e.g., exports, backups), infrastructure clues (e.g., <code>.env</code>, <code>.git/config</code>), or user-generated content (e.g., uploaded resumes, invoices). Modeling these files as assets enables targeted analysis, attribution, and monitoring.</p> </li> <li> <p>Design Choice: The <code>File</code> type is intentionally simple\u2014centered on its URL\u2014to support lightweight ingestion from crawlers, link resolvers, or passive intelligence feeds. Optional <code>name</code> and <code>type</code> fields allow for basic classification without requiring full content analysis or mime-type parsing during collection.</p> </li> </ul>"},{"location":"open_asset_model/assets/file/#file-attributes","title":"File Attributes","text":"Attributes Type Required Description <code>url</code> string Fully qualified URL to the file (e.g., <code>https://example.com/.git/config</code>) <code>name</code> string Optional file name or basename extracted from the URL <code>type</code> string Optional file type or format hint (e.g., <code>pdf</code>, <code>js</code>, <code>zip</code>)"},{"location":"open_asset_model/assets/file/#file-properties","title":"File Properties","text":"Property Type Property Name Description <code>SimpleProperty</code> <code>last_monitored</code> Tracks when a data source was last queried regarding this File <code>SourceProperty</code> Source Plugin Name Indicates that the specified data source discovered this File"},{"location":"open_asset_model/assets/file/#file-outgoing-relations","title":"File Outgoing Relations","text":"<pre><code>graph TD\nfile[\"File (https://example.com/.git/config)\"]\nurl[\"URL\"]\nurlRel@{ shape: braces, label: \"url\" }\nfile --o urlRel\nurlRel --&gt; url\n\ncontactrec[\"ContactRecord\"]\ncontains@{ shape: braces, label: \"contains\" }\nfile --o contains\ncontains --&gt; contactrec\ncontains --&gt; url</code></pre> Relation Type Relation Label Target Assets Description <code>SimpleRelation</code> <code>url</code> <code>URL</code> Links the location of the File into the greater graph <code>SimpleRelation</code> <code>contains</code> <code>ContactRecord</code>, <code>URL</code> Links content discovered in the File into the greater graph <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/assets/fqdn/","title":"FQDN","text":"<p>The FQDN (Fully Qualified Domain Name) asset type in the OWASP Open Asset Model (OAM) represents a fully specified domain name that uniquely identifies a resource within the DNS hierarchy. FQDNs are foundational elements in open-source intelligence (OSINT) and are essential to building a thorough attack surface intelligence profile.</p> <ul> <li> <p>Definition: An <code>FQDN</code> asset contains a domain name string (e.g., <code>www.example.com</code>). It refers to the complete and unambiguous name of a host or service as resolved through DNS.</p> </li> <li> <p>Purpose: This asset type enables the modeling of DNS-resolvable names as distinct entities within an attack surface. <code>FQDN</code> assets are critical for tracing how external users and systems access internal infrastructure, through domain-based references rather than direct IP addresses.</p> </li> <li> <p>Design Choice: By treating FQDNs as first-class assets, the model supports DNS resolution chains (via relations like <code>BasicDNSRelation</code>, <code>PrefDNSRelation</code>, and <code>SRVDNSRelation</code>) and links to IP addresses, services, or other host-based assets. This allows security teams to analyze exposure, misconfigurations, or shadow assets rooted in DNS name usage.</p> </li> </ul> <p>In summary, the <code>FQDN</code> asset type provides a precise and structured way to represent domain-based identifiers in the OAM, serving as a core building block for understanding how infrastructure is referenced and accessed over the internet or internal networks.</p>"},{"location":"open_asset_model/assets/fqdn/#fqdn-attributes","title":"FQDN Attributes","text":"Attributes Type Required Description <code>name</code> string Unique fully qualified domain name (e.g. www.example.com)"},{"location":"open_asset_model/assets/fqdn/#fqdn-properties","title":"FQDN Properties","text":"Property Type Property Name Description <code>SimpleProperty</code> <code>last_monitored</code> Tracks when a data source was last queried regarding this FQDN <code>SourceProperty</code> Source Plugin Name Indicates that the specified data source discovered this FQDN <code>DNSRecordProperty</code> <code>dns_record</code> Represents a DNS record for this FQDN that provides only data"},{"location":"open_asset_model/assets/fqdn/#fqdn-outgoing-relations","title":"FQDN Outgoing Relations","text":"<pre><code>graph TD\nfqdn1[\"FQDN (e.g. owasp.org)\"]\nfqdn2[\"FQDN (e.g. vpn.owasp.org)\"]\nnodeRel@{ shape: braces, label: \"node\"}\nfqdn1 --o nodeRel\nnodeRel --&gt; fqdn2\n\nipaddr[\"IPAddress\"]\nbasicdns1@{ shape: braces, label: \"dns_record\"}\nbasicdns2@{ shape: braces, label: \"dns_record\"}\nfqdn1 --o basicdns1\nbasicdns1 --&gt; ipaddr\nfqdn2 --o basicdns2\nbasicdns2 --&gt; ipaddr\n\nfqdn3[\"FQDN (e.g. send.owasp.org)\"]\nprefdns@{ shape: braces, label: \"dns_record\"}\nfqdn1 --o prefdns\nprefdns --&gt; fqdn3\n\nfqdn4[\"FQDN (e.g. _sip._tcp.owasp.org)\"]\nsrvdns@{ shape: braces, label: \"dns_record\"}\nfqdn4 --o srvdns\nsrvdns --&gt; fqdn1\n\nservice[\"Service\"]\nport@{ shape: braces, label: \"port\"}\nfqdn2 --o port\nport --&gt; service\n\ndomrec[\"DomainRecord\"]\nregrel@{ shape: braces, label: \"registration\"}\nfqdn1 --o regrel\nregrel --&gt; domrec\n\norg[\"Organization (e.g. Google LLC)\"]\nserv2[\"Service (e.g. Google Workspace)\"]\nverified@{ shape: braces, label: \"verified_for\" }\nfqdn1 --o verified\nverified --&gt; org\nverified --&gt; serv2</code></pre> Relation Type Relation Label Target Assets Description <code>BasicDNSRelation</code> <code>dns_record</code> <code>FQDN</code>, <code>IPAddress</code> Represents most RR types <code>PrefDNSRelation</code> <code>dns_record</code> <code>FQDN</code> Utilized for RR types that have a preference attribute <code>SRVDNSRelation</code> <code>dns_record</code> <code>FQDN</code> Represents the SRV Resource Record type <code>SimpleRelation</code> <code>node</code> <code>FQDN</code> Links a DNS zone apex to nodes within the zone <code>PortRelation</code> <code>port</code> <code>Service</code> Represents a port at the FQDN with a responding service <code>SimpleRelation</code> <code>registration</code> <code>DomainRecord</code> Links a root domain to its associated registration data <code>SimpleRelation</code> <code>verified_for</code> <code>Organization</code>, <code>Service</code> Evidence was discovered of a business or technical relationship <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/assets/funds_transfer/","title":"FundsTransfer","text":"<p>The FundsTransfer asset type in the OWASP Open Asset Model (OAM) represents the movement of funds between two financial accounts. These transfers may occur via wire, ACH, cryptocurrency, internal bank movement, or other mechanisms that involve the exchange of currency between accounts or organizations.</p> <ul> <li> <p>Definition: A <code>FundsTransfer</code> asset models a single financial transaction involving a specific amount of money, a method of transfer, a currency type, and optionally, reference and exchange data.</p> </li> <li> <p>Purpose: Including <code>FundsTransfer</code> in the asset model enables reasoning about financial flows, which can assist in analyzing operational patterns, detecting anomalies, or tracing value exchanges between entities. When connected to <code>Account</code> assets, it supports graph-based queries that explore supply chains, fraud trails, and inter-organizational dependencies.</p> </li> <li> <p>Design Choice: This type focuses on capturing the structure of a transfer (e.g., amount, method, and timing) rather than sensitive or regulated content (like full account numbers). Optional fields like <code>exchange_rate</code> allow the model to support cross-currency scenarios and future integration with financial intelligence tooling, while keeping the core schema minimal and auditable.</p> </li> </ul> <p>The FundsTransfer asset type enables graph-based tracking of financial transactions, providing insight into economic behavior, potential fraud, or organizational connections in the external attack surface.</p>"},{"location":"open_asset_model/assets/funds_transfer/#fundstransfer-attributes","title":"FundsTransfer Attributes","text":"Attributes Type Required Description <code>unique_id</code> string Unique identifier for the transaction <code>amount</code> float Monetary value of the transfer <code>reference_number</code> string Transaction reference code (e.g., SWIFT, internal ID) <code>currency</code> string ISO 4217 currency code (e.g., <code>USD</code>, <code>EUR</code>, <code>BTC</code>) <code>transfer_method</code> string Method used (e.g., <code>wire</code>, <code>ACH</code>, <code>crypto</code>) <code>exchange_date</code> string Date when currency exchange (if any) occurred <code>exchange_rate</code> float Rate used for currency conversion, if applicable"},{"location":"open_asset_model/assets/funds_transfer/#fundstransfer-properties","title":"FundsTransfer Properties","text":"Property Type Property Name Description <code>SimpleProperty</code> <code>last_monitored</code> Tracks when a data source was last queried regarding this FundsTransfer <code>SourceProperty</code> Source Plugin Name Indicates that the specified data source discovered this FundsTransfer"},{"location":"open_asset_model/assets/funds_transfer/#fundstransfer-outgoing-relations","title":"FundsTransfer Outgoing Relations","text":"<pre><code>graph TD\ntransfer[\"FundsTransfer ($5,000 USD)\"]\nident[\"Identifer\"]\nidRel@{ shape, braces, label: \"id\" }\ntransfer --o idRel\nidRel --&gt; ident\n\nacct1[\"Account (acct-123)\"]\nfromRel@{ shape: braces, label: \"sender\" }\ntransfer --o fromRel\nfromRel --&gt; acct1\n\nacct2[\"Account (acct-456)\"]\ntoRel@{ shape: braces, label: \"recipient\" }\ntransfer --o toRel\ntoRel --&gt; acct2\n\norg[\"Organization\"]\nthird@{ shape: braces, label: \"third_party\" }\ntransfer --o third\nthird --&gt; org</code></pre> Relation Type Relation Label Target Assets Description <code>SimpleRelation</code> <code>id</code> <code>Identifier</code> Links the FundsTransfer to <code>Identifier</code> assets, such as confirmation numbers <code>SimpleRelation</code> <code>sender</code> <code>Account</code> Links the FundsTransfer to the <code>Account</code> that sent the funds <code>SimpleRelation</code> <code>recipient</code> <code>Account</code> Links the FundsTransfer to the <code>Account</code> that received the funds <code>SimpleRelation</code> <code>third_party</code> <code>Organization</code> A third-party sender that initiates a funds transfer on behalf of another party <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/assets/identifier/","title":"Identifier","text":"<p>The Identifier asset type in the OWASP Open Asset Model (OAM) represents a structured, time-aware label used to uniquely reference an asset, entity, or object within or across systems.</p> <ul> <li>Definition: An <code>Identifier</code> includes a unique string (<code>unique_id</code>) and a human-readable or system-specific ID value (<code>id</code>), along with metadata about its type, lifecycle, and status. It is defined by the following attributes:</li> <li><code>unique_id</code>: A globally unique string representing the identifier instance (e.g., a UUID).</li> <li><code>id</code>: The actual identifier value, such as a hostname, domain name, serial number, or object ID.</li> <li><code>id_type</code>: A label describing the type of identifier (e.g., <code>arin</code>, <code>duns</code>, <code>email</code>, <code>lei</code>, etc.).</li> <li><code>creation_date</code> (optional): When the identifier was created.</li> <li><code>update_date</code> (optional): The most recent update timestamp.</li> <li><code>expiration_date</code> (optional): When the identifier is expected to expire or become invalid.</li> <li> <p><code>status</code> (optional): The current state of the identifier (e.g., <code>active</code>, <code>expired</code>, <code>revoked</code>).</p> </li> <li> <p>Purpose: This asset type provides a standardized way to model references to assets or entities that exist in external systems, databases, or registries. It supports use cases such as identity tracking, configuration management, compliance audits, and historical analysis.</p> </li> <li> <p>Design Choice: By separating the identifier\u2019s core value (<code>id</code>) from its metadata (such as timestamps and status), the model allows flexible and time-sensitive tracking of identifiers. This enables better integration with asset registries, IAM systems, and third-party feeds while preserving clarity in asset relationships.</p> </li> </ul> <p>In summary, the <code>Identifier</code> asset type captures structured, versioned references to external or internal identifiers, enabling the OAM to model asset identity and traceability across systems and time.</p>"},{"location":"open_asset_model/assets/identifier/#identifier-attributes","title":"Identifier Attributes","text":"Attributes Type Required Description <code>unique_id</code> string A globally unique string representing the identifier <code>id</code> string The actual identifier value, such as a serial number <code>id_type</code> string A label describing the type of identifier <code>creation_date</code> string When the identifier was created <code>update_date</code> string The most recent update timestamp <code>expiration_date</code> string When the identifier is expected to become invalid <code>status</code> string The current state of the identifier"},{"location":"open_asset_model/assets/identifier/#identifier-properties","title":"Identifier Properties","text":"Property Type Property Name Description <code>SimpleProperty</code> <code>last_monitored</code> Tracks when a data source was last queried regarding this Identifier <code>SourceProperty</code> Source Plugin Name Indicates that the specified data source discovered this Identifier"},{"location":"open_asset_model/assets/identifier/#identifier-outgoing-relations","title":"Identifier Outgoing Relations","text":"<pre><code>graph TD\nident[\"Identifier\"]\ncontact[\"ContactRecord\"]\nallrel@{ shape: braces, label: \"issuing_agent\nissuing_authority\nregistration_agency\" }\nident --o allrel\nallrel --&gt; contact</code></pre> Relation Type Relation Label Target Assets Description <code>SimpleRelation</code> <code>registration_agency</code> <code>ContactRecord</code> Links a registration ID with the registering agency <code>SimpleRelation</code> <code>issuing_authority</code> <code>ContactRecord</code> Links an identifier with its issuing authority <code>SimpleRelation</code> <code>issuing_agent</code> <code>ContactRecord</code> Links an identifier with its issuing agent <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/assets/ip_address/","title":"IPAddress","text":"<p>The IPAddress asset type in the OWASP Open Asset Model (OAM) represents a concrete IP address and its associated protocol version, used to uniquely identify network endpoints in the model.</p> <ul> <li>Definition: An <code>IPAddress</code> asset holds two primary attributes:</li> <li><code>address</code>: The actual IP address in string format (e.g., <code>192.0.2.1</code> or <code>2001:db8::1</code>).</li> <li> <p><code>type</code>: The IP protocol version, typically either <code>IPv4</code> or <code>IPv6</code>.</p> </li> <li> <p>Purpose: This asset type enables the explicit representation of individual IP addresses as first-class entities within the attack surface model. These can be linked to other assets (e.g., domains, ports, hosts) to show how infrastructure components are exposed or interconnected via the network.</p> </li> <li> <p>Design Choice: By separating the address from its protocol type, the model supports clear differentiation between IPv4 and IPv6, even when similar address representations exist. This structure also improves compatibility with analysis tools and threat modeling processes that treat IPv4 and IPv6 differently due to their behavior and reachability characteristics.</p> </li> </ul> <p>In summary, the <code>IPAddress</code> asset provides a simple yet precise way to model network identity, supporting both IPv4 and IPv6, and serving as a foundational building block for visualizing and analyzing network-layer exposure in the OAM.</p>"},{"location":"open_asset_model/assets/ip_address/#ipaddress-attributes","title":"IPAddress Attributes","text":"Attributes Type Required Description <code>address</code> string Unique Internet Protocol address (e.g. 72.237.4.113) <code>type</code> string The IP protocol version, typically either <code>IPv4</code> or <code>IPv6</code>"},{"location":"open_asset_model/assets/ip_address/#ipaddress-properties","title":"IPAddress Properties","text":"Property Type Property Name Description <code>SimpleProperty</code> <code>last_monitored</code> Tracks when a data source was last queried regarding this IPAddress <code>SourceProperty</code> Source Plugin Name Indicates that the specified data source discovered this IPAddress"},{"location":"open_asset_model/assets/ip_address/#ipaddress-outgoing-relations","title":"IPAddress Outgoing Relations","text":"<pre><code>graph TD\nipaddr[\"IPAddress\"]\nfqdn[\"FQDN (e.g. 113.4.237.72.in-addr.arpa)\"]\nptr@{ shape: braces, label: \"ptr_record\"}\nipaddr --o ptr\nptr --&gt; fqdn\n\nservice[\"Service\"]\nport@{ shape: braces, label: \"port\"}\nipaddr --o port\nport --&gt; service</code></pre> Relation Type Relation Label Target Assets Description <code>SimpleRelation</code> <code>ptr_record</code> <code>FQDN</code> Links an IPAddress to its DNS name used in PTR records <code>PortRelation</code> <code>port</code> <code>Service</code> Represents a port at the IPAddress with a responding service <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/assets/ipnet_record/","title":"IPNetRecord","text":"<p>The IPNetRecord asset type in the OWASP Open Asset Model (OAM) represents authoritative registration data for a block of IP addresses (IPv4 or IPv6), typically retrieved from a Regional Internet Registry (RIR) via the RDAP protocol. This record captures the ownership, administrative, and organizational context of a given CIDR allocation.</p> <ul> <li> <p>Definition: An <code>IPNetRecord</code> models a registered IP network block with accompanying metadata such as handle, range, status, country, and registration dates. It mirrors RDAP responses from RIRs like ARIN, RIPE, APNIC, AFRINIC, and LACNIC.</p> </li> <li> <p>Purpose: By modeling IP allocations as assets, <code>IPNetRecord</code> entries allow external infrastructure to be tied back to real-world entities. This is essential for attribution, provider relationships, and BGP analysis. It enables analysts to query: \u201cWho owns this IP range?\u201d, \u201cWhat organization controls this infrastructure?\u201d, or \u201cWhich AS announces this block?\u201d</p> </li> <li> <p>Design Choice: The <code>IPNetRecord</code> structure preserves key fields from RDAP while ensuring they are queryable in graph form. CIDR blocks are expressed as typed network prefixes with explicit start and end addresses. Optional fields provide additional semantics for routing origin, delegation hierarchy, and jurisdictional scope.</p> </li> </ul> <p>The IPNetRecord asset enables infrastructure attribution, jurisdictional mapping, and inter-provider analysis within the OAM graph, anchoring raw IPs and services in a meaningful real-world context.</p>"},{"location":"open_asset_model/assets/ipnet_record/#ipnetrecord-attributes","title":"IPNetRecord Attributes","text":"Attributes Type Required Description <code>cidr</code> CIDR prefix The registered network range in CIDR notation (e.g., <code>192.0.2.0/24</code>) <code>handle</code> string RIR-assigned handle for the record <code>name</code> string Name associated with the registration (e.g., organization or role) <code>type</code> string Type of allocation (e.g., <code>ALLOCATED</code>, <code>ASSIGNED</code>) <code>start_address</code> IP address First IP in the range <code>end_address</code> IP address Last IP in the range <code>created_date</code> string (ISO) Date the block was initially registered <code>updated_date</code> string (ISO) Most recent modification date <code>status</code> array of strings Optional flags such as <code>active</code>, <code>allocated</code>, <code>legacy</code> <code>whois_server</code> string RIR WHOIS or RDAP server used to retrieve the data <code>method</code> string Discovery method (e.g., <code>RDAP</code>, <code>WHOIS</code>) <code>country</code> string (ISO) Country code associated with the allocation (e.g., <code>US</code>) <code>parent_handle</code> string Handle of the parent allocation, if applicable <code>raw</code> string Raw RDAP or WHOIS response preserved for auditing"},{"location":"open_asset_model/assets/ipnet_record/#ipnetrecord-properties","title":"IPNetRecord Properties","text":"Property Type Property Name Description <code>SimpleProperty</code> <code>last_monitored</code> Timestamp of the last time this record was updated or verified <code>SourceProperty</code> Source Plugin Name Indicates which data source retrieved the registration"},{"location":"open_asset_model/assets/ipnet_record/#ipnetrecord-outgoing-relations","title":"IPNetRecord Outgoing Relations","text":"<pre><code>graph TD\niprec[\"IPNetRecord (192.0.2.0/24)\"]\nwhois[\"FQDN\"]\nwhoisRel@{ shape: braces, label: \"whois_server\" }\niprec --o whoisRel\nwhoisRel --&gt; whois\n\ncontact[\"ContactRecord\"]\ncontactrel@{ shape: braces, label: \"registrant\nadmin_contact\nabuse_contact\ntechnical_contact\" }\niprec --o contactrel\ncontactrel --&gt; contact\n\nurl[\"URL\"]\nurlRel@{ shape: braces, label: \"rdap_url\" }\niprec --o urlRel\nurlRel --&gt; url</code></pre> Relation Type Relation Label Target Assets Description <code>SimpleRelation</code> <code>whois_server</code> <code>FQDN</code> Links the netblock registration information with the correct WHOIS server <code>SimpleRelation</code> <code>registrant</code> <code>ContactRecord</code> Links the netblock registration information with registrant contact information <code>SimpleRelation</code> <code>admin_contact</code> <code>ContactRecord</code> Links the netblock registration information with admin contact information <code>SimpleRelation</code> <code>abuse_contact</code> <code>ContactRecord</code> Links the netblock registration information with contact information for abuse reporting <code>SimpleRelation</code> <code>technical_contact</code> <code>ContactRecord</code> Links the netblock registration information with contact information of technical personnel <code>SimpleRelation</code> <code>rdap_url</code> <code>URL</code> Links the netblock registration information to its associated web page <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/assets/location/","title":"Location","text":"<p>The Location asset type in the OWASP Open Asset Model (OAM) represents a physical, postal, or geo-administrative address where an entity, asset, or infrastructure component is situated. Modeling locations is essential for physical security, compliance, and geo-contextual threat intelligence.</p> <ul> <li> <p>Definition: A <code>Location</code> asset encapsulates structured geographic and civic data elements such as street name, building number, city, province, country, and more. It is designed to express physical placement or registration information for various assets in the OAM.</p> </li> <li> <p>Purpose: By defining <code>Location</code> as a core asset, the model enables linkage between digital infrastructure and their physical contexts. This supports use cases like data residency enforcement, regional exposure analysis, and logistics around physical components of an attack surface.</p> </li> <li> <p>Design Choice: Each attribute within the <code>Location</code> asset is modeled with optionality in mind, allowing broad applicability \u2014 from a complete civic address to partial location data such as city-only or PO Box information. The inclusion of a <code>GLN</code> (Global Location Number) field aligns with standardized supply chain and logistics frameworks.</p> </li> </ul> <p>In summary, the <code>Location</code> asset type serves as a structured and flexible mechanism for tying assets to their real-world geographic presence \u2014 aiding in operational awareness, compliance mapping, and geospatial intelligence.</p>"},{"location":"open_asset_model/assets/location/#location-attributes","title":"Location Attributes","text":"Attributes Type Required Description <code>address</code> string Full unstructured address (fallback or human-readable) <code>building</code> string Building name or identifier <code>building_number</code> string Street number of the building <code>street_name</code> string Name of the street <code>unit</code> string Apartment, suite, or unit number <code>po_box</code> string Post office box number <code>city</code> string City or municipality name <code>locality</code> string District, borough, or neighborhood name <code>province</code> string State, province, or administrative div <code>country</code> string Country name (ISO recommended) <code>postal_code</code> string ZIP or postal code <code>gln</code> int Global Location Number (GS1 standard)"},{"location":"open_asset_model/assets/location/#location-properties","title":"Location Properties","text":"Property Type Property Name Description <code>SimpleProperty</code> <code>last_monitored</code> Tracks when a data source was last queried regarding this Location <code>SourceProperty</code> Source Plugin Name Indicates that the specified data source discovered this Location"},{"location":"open_asset_model/assets/location/#location-outgoing-relations","title":"Location Outgoing Relations","text":"<pre><code>graph TD\nloc[\"Location (e.g. Frankfurt)\"]\nident[\"Identifier (e.g. AWS Data Center)\"]\nrel@{ shape: braces, label: \"id\" }\nloc --o rel\nrel --&gt; ident</code></pre> Relation Type Relation Label Target Assets Description <code>SimpleRelation</code> <code>id</code> <code>Identifier</code> Links the <code>Location</code> alternative IDs, such as facility names <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/assets/netblock/","title":"Netblock","text":"<p>The Netblock asset type in the OWASP Open Asset Model (OAM) represents a contiguous range of IP addresses, typically expressed in CIDR notation and often associated with an Autonomous System (AS).</p> <ul> <li> <p>Definition: A <code>Netblock</code> defines an IP range (e.g., <code>203.0.113.0/24</code> or <code>2001:db8::/32</code>) that encompasses many individual IP addresses. It usually reflects address space allocated to or announced by an Autonomous System and may represent organizational, geographic, or functional network boundaries.</p> </li> <li> <p>Purpose: This asset type enables modeling of large-scale network ownership and infrastructure grouping. By identifying which IP addresses fall within a specific <code>Netblock</code>, analysts can track organizational control, ISP allocation, or exposure zones across the internet or private networks. It's especially useful in asset discovery, threat attribution, and risk scoping.</p> </li> <li> <p>Design Choice: The <code>Netblock</code> provides an abstract, high-level view of address space without enumerating every IP address it contains. It can be related to specific <code>IPAddress</code> or <code>AutonomousSystem</code> assets through appropriate relations, enabling hierarchical and scalable modeling of internet-facing infrastructure.</p> </li> </ul> <p>In summary, the <code>Netblock</code> asset type captures ranges of IP addresses in a compact, structured way, supporting infrastructure mapping, ownership tracking, and contextual analysis of network exposure in the OAM.</p>"},{"location":"open_asset_model/assets/netblock/#netblock-attributes","title":"Netblock Attributes","text":"Attributes Type Required Description <code>cidr</code> string Contains the IP address range (e.g., <code>203.0.113.0/24</code>) <code>type</code> string The IP protocol version, typically either <code>IPv4</code> or <code>IPv6</code>"},{"location":"open_asset_model/assets/netblock/#netblock-properties","title":"Netblock Properties","text":"Property Type Property Name Description <code>SimpleProperty</code> <code>last_monitored</code> Tracks when a data source was last queried regarding this Netblock <code>SourceProperty</code> Source Plugin Name Indicates that the specified data source discovered this Netblock"},{"location":"open_asset_model/assets/netblock/#netblock-outgoing-relations","title":"Netblock Outgoing Relations","text":"<pre><code>graph TD\nnetblock[\"Netblock\"]\nipaddr[\"IPAddress\"]\ncontains@{ shape: braces, label: \"contains\" }\nnetblock --o contains\ncontains --&gt; ipaddr\n\niprec[\"IPNetRecord\"]\nregrel@{ shape: braces, label: \"registration\"}\nnetblock --o regrel\nregrel --&gt; iprec</code></pre> Relation Type Relation Label Target Assets Description <code>SimpleRelation</code> <code>contains</code> <code>IPAddress</code> Links a Netblock to an IPAddress within the CIDR range <code>SimpleRelation</code> <code>registration</code> <code>IPNetRecord</code> Links a network to its associated registration data <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/assets/organization/","title":"Organization","text":"<p>The <code>Organization</code> asset type in the OWASP Open Asset Model (OAM) represents a real-world legal entity, such as a corporation, nonprofit, or government agency, that owns or operates digital infrastructure. This asset type is critical for enabling attribution, relationship mapping, and grouping of Internet-exposed resources under a common ownership structure.</p> <p>By representing organizations explicitly, the model supports a wide range of use cases including legal entity discovery, supply chain risk analysis, and asset attribution in large or decentralized environments. This asset often serves as the root from which other assets, such as IP ranges, domain names, and TLS certificates, are discovered and associated.</p> <p>Each <code>Organization</code> includes structured metadata such as:</p> <ul> <li>ID \u2013 A globally unique identifier for the organization within the graph.</li> <li>Name \u2013 A commonly used name for the organization (e.g., <code>Acme Corp</code>).</li> <li>Legal Name \u2013 The formally registered legal name (e.g., <code>Acme Corporation, Inc.</code>).</li> <li>Founding Date \u2013 The year or date when the organization was established.</li> <li>Jurisdiction \u2013 The legal or regulatory jurisdiction where the entity is registered (e.g., <code>US-DE</code> for Delaware, United States).</li> <li>Registration ID \u2013 An optional formal identifier from a national registry (e.g., a company number or DUNS number).</li> <li>Industry \u2013 A general classification of the organization\u2019s primary business activity (e.g., <code>Cloud Services</code>, <code>Financial Technology</code>).</li> <li>Target Markets \u2013 Geographic or sectoral regions the organization primarily serves.</li> <li>Active \u2013 A boolean indicating whether the organization is currently operational.</li> <li>Nonprofit \u2013 A boolean indicating whether the entity is a nonprofit organization.</li> <li>Headcount \u2013 An estimate of the number of employees.</li> </ul> <p>The <code>Organization</code> asset enables enrichment and correlation of digital infrastructure findings with publicly available business data. It plays a foundational role in external asset discovery workflows that begin from company metadata, such as legal names or registration information, and then pivot into technical assets like domains, netblocks, and services.</p>"},{"location":"open_asset_model/assets/organization/#organization-attributes","title":"Organization Attributes","text":"Attributes Type Required Description <code>unique_id</code> string Unique identifier for the organization within the model <code>name</code> string Common name used to identify the organization <code>legal_name</code> string Official registered name of the organization <code>founding_date</code> string (date) Date when the organization was founded (e.g., <code>2004-09-15</code>) <code>jurisdiction</code> string Legal jurisdiction of incorporation (e.g., <code>US-DE</code>) <code>registration_id</code> string Registered entity ID from a business registry <code>industry</code> string Sector classification (e.g., <code>Cybersecurity</code>, <code>E-Commerce</code>) <code>target_markets</code> array of strings Markets or regions the organization serves (e.g., <code>US</code>, <code>EU</code>) <code>active</code> boolean Whether the organization is currently active <code>non_profit</code> boolean Whether the organization is a nonprofit <code>headcount</code> number Approximate number of employees"},{"location":"open_asset_model/assets/organization/#organization-properties","title":"Organization Properties","text":"Property Type Property Name Description <code>SimpleProperty</code> <code>last_monitored</code> Tracks when a data source was last queried regarding this Organization <code>SourceProperty</code> Source Plugin Name Indicates that the specified data source discovered this Organization"},{"location":"open_asset_model/assets/organization/#organization-outgoing-relations","title":"Organization Outgoing Relations","text":"<pre><code>graph TD\norg[\"Organization\"]\nident[\"Identifier\"]\nidrel@{ shape: braces, label: \"id\" }\norg --o idrel\nidrel --&gt; ident\n\nloc[\"Location\"]\nlocrel@{ shape: braces, label: \"legal_address\nhq_address\nlocation\" }\norg --o locrel\nlocrel --&gt; loc\n\norg2[\"Organization\"]\norgrel@{ shape: braces, label: \"subsidiary\norg_unit\" }\norg --o orgrel\norgrel --&gt; org2\n\nurl[\"URL\"]\nurlrel@{ shape: braces, label: \"website\nsocial_media_profile\" }\norg --o urlrel\nurlrel --&gt; url\n\naccount[\"Account\"]\nacctrel@{ shape: braces, label: \"account\" }\norg --o acctrel\nacctrel --&gt; account\n\nperson[\"Person\"]\nmember@{ shape: braces, label: \"member\" }\norg --o member\nmember --&gt; person\n\nfunding@{ shape: braces, label: \"funding_source\" }\norg --o funding\nfunding --&gt; org2\nfunding --&gt; person</code></pre> Relation Type Relation Label Target Assets Description <code>SimpleRelation</code> <code>id</code> <code>Identifier</code> Links the organization to alternative identifiers <code>SimpleRelation</code> <code>legal_address</code> <code>Location</code> Links the organization to its legal street address <code>SimpleRelation</code> <code>hq_address</code> <code>Location</code> Links the organization to the street address of its headquarters <code>SimpleRelation</code> <code>location</code> <code>Location</code> Links the organization to the street address of an alternative location <code>SimpleRelation</code> <code>subsidiary</code> <code>Organization</code> Links the organization to one of its child organizations <code>SimpleRelation</code> <code>org_unit</code> <code>Organization</code> Links the organization to one of its sectors or departments that is externally visible <code>SimpleRelation</code> <code>account</code> <code>Account</code> Links the organization to one of its digital or financial accounts <code>SimpleRelation</code> <code>member</code> <code>Person</code> Links the organization to one of its employees identified as a <code>Person</code> asset <code>SimpleRelation</code> <code>website</code> <code>URL</code> Links the organization to its primary website or one dedicated to a product <code>SimpleRelation</code> <code>social_media_profile</code> <code>URL</code> Links the organization to one of its social media profiles <code>SimpleRelation</code> <code>funding_source</code> <code>Organization</code>, <code>Person</code> An <code>Organization</code> or <code>Person</code> that has invested in this company previously <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/assets/person/","title":"Person","text":"<p>The Person asset type in the OWASP Open Asset Model (OAM) represents an individual human being discovered as part of intelligence collection, attribution, or enrichment processes. Persons may appear in public records, domain registrations, technical contacts, breached datasets, or OSINT sources and often serve as pivots for understanding organizational relationships or behavioral patterns.</p> <ul> <li> <p>Definition: A <code>Person</code> asset encapsulates identifying attributes such as full legal name, date of birth, and gender. It may represent a registrant, technical contact, executive, threat actor, or any other discovered individual.</p> </li> <li> <p>Purpose: Modeling people as structured assets allows for attribution graphs, ownership resolution, and behavioral correlation across disparate data points. Individuals are often central to understanding the provenance, intent, or organizational structure behind assets like domains, IP ranges, or certificates.</p> </li> <li> <p>Design Choice: The <code>Person</code> structure includes multiple levels of name granularity to enable flexible matching and entity resolution. Optional fields (e.g., <code>birth_date</code>, <code>gender</code>) support deeper analysis when present, but are not required\u2014ensuring compatibility with incomplete or privacy-preserving sources. The model avoids sensitive personal information (e.g., national IDs) unless already exposed via legitimate public data sources.</p> </li> </ul> <p>The Person asset type enables entity-centric analysis within the Open Asset Model, helping analysts reason about attribution, ownership, and relationships between human actors and the infrastructure they operate or influence.</p>"},{"location":"open_asset_model/assets/person/#person-attributes","title":"Person Attributes","text":"Attributes Type Required Description <code>unique_id</code> string Unique identifier for the person asset <code>full_name</code> string Complete name string (e.g., <code>\"Jane Elizabeth Smith\"</code>) <code>first_name</code> string Given name or forename <code>middle_name</code> string Optional middle name(s) or initials <code>family_name</code> string Surname or last name <code>birth_date</code> string Optional date of birth (ISO format) <code>gender</code> string Optional gender descriptor (e.g., <code>female</code>, <code>nonbinary</code>)"},{"location":"open_asset_model/assets/person/#person-properties","title":"Person Properties","text":"Property Type Property Name Description <code>SimpleProperty</code> <code>last_monitored</code> Tracks when a data source was last queried regarding this Person <code>SourceProperty</code> Source Plugin Name Indicates that the specified data source discovered this Person"},{"location":"open_asset_model/assets/person/#person-outgoing-relations","title":"Person Outgoing Relations","text":"<pre><code>graph TD\nperson[\"Person (Jane E. Smith)\"]\nident[\"Identifier\"]\nidRel@{ shape: braces, label: \"id\" }\nperson --o idRel\nidRel --&gt; ident\n\nloc[\"Location (Street Address)\"]\nlocRel@{ shape: braces, label: \"address\" }\nperson --o locRel\nlocRel --&gt; loc\n\nphone[\"Phone\"]\nphoneRel@{ shape: braces, label: \"phone\" }\nperson --o phoneRel\nphoneRel --&gt; phone\n\nacct[\"Account\"]\naccount@{ shape: braces, label: \"account\" }\nperson --o account\naccount --&gt; acct</code></pre> Relation Type Relation Label Target Assets Description <code>SimpleRelation</code> <code>id</code> <code>Identifier</code> Links the <code>Person</code> to another <code>Identifier</code>, such as a maiden name <code>SimpleRelation</code> <code>address</code> <code>Location</code> Links the <code>Person</code> to a discovered street address <code>SimpleRelation</code> <code>phone</code> <code>Phone</code> Links the <code>Person</code> to a discovered phone number, such as a cell phone <code>SimpleRelation</code> <code>account</code> <code>Account</code> An account owned or used by the Person, such as an email account <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/assets/phone/","title":"Phone","text":"<p>The Phone asset type in the OWASP Open Asset Model (OAM) represents a structured phone number associated with a person, organization, or service. This includes landlines, mobile phones, and fax numbers, supporting international formats and extensions.</p> <ul> <li> <p>Definition: A <code>Phone</code> asset includes raw and standardized (E.164) representations of phone numbers, along with metadata such as type (e.g., mobile or fax), country code, and optional extension.</p> </li> <li> <p>Purpose: Phone numbers are valuable in OSINT investigations, phishing detection, social engineering risk analysis, and mapping communications infrastructure. Modeling them as first-class assets allows for clear linkage to entities and tracing how they appear across datasets.</p> </li> <li> <p>Design Choice: The model uses the E.164 international standard to normalize phone numbers for global consistency. A <code>Type</code> field supports differentiation between regular, mobile, and fax numbers, enabling more nuanced analysis and relation modeling.</p> </li> </ul> <p>In summary, the <code>Phone</code> asset type brings structure and semantic clarity to phone number data, providing essential context for investigative and security workflows in the OAM.</p>"},{"location":"open_asset_model/assets/phone/#phone-attributes","title":"Phone Attributes","text":"Attributes Type Required Description <code>type</code> string Type of phone number \u2014 <code>phone</code>, <code>fax</code>, or <code>mobile</code> <code>raw</code> string Original, unprocessed string version of the number <code>e164</code> string Standardized E.164 format (e.g., <code>+14155552671</code>) <code>country_abbrev</code> string ISO 3166-1 alpha-2 country abbreviation (e.g., <code>US</code>) <code>country_code</code> int Country dialing code (e.g., <code>1</code> for the US) <code>ext</code> string Phone extension, if applicable (e.g., <code>x1234</code>)"},{"location":"open_asset_model/assets/phone/#phone-properties","title":"Phone Properties","text":"Property Type Property Name Description <code>SimpleProperty</code> <code>last_monitored</code> Tracks when a data source was last queried regarding this Phone <code>SourceProperty</code> Source Plugin Name Indicates that the specified data source discovered this Phone"},{"location":"open_asset_model/assets/phone/#phone-outgoing-relations","title":"Phone Outgoing Relations","text":"<pre><code>graph TD\nphone[\"Phone (+1-415-555-2671)\"]\nacct[\"Account\"]\naccount@{ shape: braces, label: \"account\" }\nphone --o account\naccount --&gt; acct\n\ncontactrec[\"ContactRecord\"]\ncontact@{ shape: braces, label: \"contact\" }\nphone --o contact\ncontact --&gt; contactrec</code></pre> Relation Type Relation Label Target Assets Description <code>SimpleRelation</code> <code>account</code> <code>Account</code> Links the <code>Phone</code> number to a customer account <code>SimpleRelation</code> <code>contact</code> <code>ContactRecord</code> Links the <code>Phone</code> number to additional customer information <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/assets/product/","title":"Product","text":"<p>The Product asset type in the OWASP Open Asset Model (OAM) represents a commercial or open-source technology product\u2014hardware, software, or service\u2014that plays a role in an organization's external attack surface. Products may include server software, security appliances, cloud services, content management systems, networking gear, and more.</p> <ul> <li> <p>Definition: A <code>Product</code> asset includes a name, type, optional category and description, and optionally a country of origin. It represents a distinct technology offering as discovered in intelligence collection, vulnerability data, or infrastructure enumeration.</p> </li> <li> <p>Purpose: Modeling products as first-class assets allows the OAM to associate technologies with organizations, services, or infrastructure. This helps analysts answer questions like \u201cWhat products are deployed by this organization?\u201d, \u201cWhere are certain technologies concentrated?\u201d, or \u201cIs this vulnerable product version publicly exposed?\u201d</p> </li> <li> <p>Design Choice: The <code>Product</code> structure is intentionally minimal to support broad applicability. While the <code>ProductRelease</code> handles additional information such as version, vendor, and licensing via <code>Identifier</code> assets and properties, the core type emphasizes identification and categorization. The inclusion of <code>country_of_origin</code> supports use cases related to supply chain risk and regulatory compliance.</p> </li> </ul> <p>The Product asset type provides structured visibility into the technologies exposed in an organization's external footprint, supporting vulnerability mapping, software inventory, and strategic technology analysis.</p>"},{"location":"open_asset_model/assets/product/#product-attributes","title":"Product Attributes","text":"Attributes Type Required Description <code>unique_id</code> string Unique identifier for the product asset <code>product_name</code> string Name of the product (e.g., <code>nginx</code>, <code>Apache Tomcat</code>, <code>Zoom</code>) <code>product_type</code> string General type (<code>software</code>, <code>hardware</code>, <code>service</code>, etc.) <code>category</code> string Optional category (e.g., <code>web_server</code>, <code>load_balancer</code>, <code>crm</code>) <code>description</code> string Optional short description of the product <code>country_of_origin</code> string Optional ISO country code or name (e.g., <code>US</code>, <code>Germany</code>)"},{"location":"open_asset_model/assets/product/#product-properties","title":"Product Properties","text":"Property Type Property Name Description <code>SimpleProperty</code> <code>last_monitored</code> Tracks when a data source was last queried regarding this Product <code>SourceProperty</code> Source Plugin Name Indicates that the specified data source discovered this Product"},{"location":"open_asset_model/assets/product/#product-outgoing-relations","title":"Product Outgoing Relations","text":"<pre><code>graph TD\nproduct[\"Product (nginx)\"]\nident[\"Identifier\"]\nidRel@{ shape: braces, label: \"id\" }\nproduct --o idRel\nidRel --&gt; ident\n\norg[\"Organization\"]\nvendorRel@{ shape: braces, label: \"manufacturer\" }\nproduct --o vendorRel\nvendorRel --&gt; org\n\nurl[\"URL\"]\nwebRel@{ shape: braces, label: \"website\" }\nproduct --o webRel\nwebRel --&gt; url\n\nprodrel[\"ProductRelease\"]\nrel@{ shape: braces, label: \"release\" }\nproduct --o rel\nrel --&gt; prodrel</code></pre> Relation Type Relation Label Target Assets Description <code>SimpleRelation</code> <code>id</code> <code>Identifier</code> Links the Product to <code>Identifier</code> assets, such as product identifiers <code>SimpleRelation</code> <code>manufacturer</code> <code>Organization</code> The organization that produces and supports the product <code>SimpleRelation</code> <code>website</code> <code>URL</code> The website where information can be found about the product <code>SimpleRelation</code> <code>release</code> <code>ProductRelease</code> Links the Product to known product releases and versions <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/assets/product_release/","title":"ProductRelease","text":"<p>The ProductRelease asset type in the OWASP Open Asset Model (OAM) represents a specific version or release milestone of a technology product. This asset enables security analysts to track when a product version was introduced, helping to contextualize vulnerabilities, lifecycles, and compatibility considerations.</p> <ul> <li> <p>Definition: A <code>ProductRelease</code> asset identifies a named version or release of a product (e.g., \"v2.4.1\", \"2023 Q1 Patch\"). It may optionally include the release date in a standardized format.</p> </li> <li> <p>Purpose: Tracking product releases is vital for assessing vulnerability exposure, patch levels, software supply chain integrity, and asset compatibility. This asset type supports fine-grained analysis of software deployment across environments.</p> </li> <li> <p>Design Choice: By separating a <code>ProductRelease</code> from the broader <code>Product</code> asset, the model supports a clean versioning structure that can evolve independently. This separation enables better temporal modeling and historical tracking of asset deployments and vulnerabilities.</p> </li> </ul> <p>In summary, the <code>ProductRelease</code> asset type provides version-level granularity for representing software and hardware products, enriching the asset graph for supply chain and lifecycle analysis.</p>"},{"location":"open_asset_model/assets/product_release/#productrelease-attributes","title":"ProductRelease Attributes","text":"Attributes Type Required Description <code>name</code> string Identifier of the release (e.g., <code>v1.2.3</code>, <code>2024.06</code>) <code>release_date</code> string Optional date the release became available (<code>YYYY-MM-DD</code>)"},{"location":"open_asset_model/assets/product_release/#productrelease-properties","title":"ProductRelease Properties","text":"Property Type Property Name Description <code>SimpleProperty</code> <code>last_monitored</code> Tracks when a data source was last queried regarding this ProductRelease <code>SourceProperty</code> Source Plugin Name Indicates that the specified data source discovered this ProductRelease <code>VulnProperty</code> Vulnerability ID Specifies a vulnerability associated with this ProductRelease"},{"location":"open_asset_model/assets/product_release/#productrelease-outgoing-relations","title":"ProductRelease Outgoing Relations","text":"<pre><code>graph TD\nrelease[\"ProductRelease (Apache HTTP Server v1.2.3)\"]\nident[\"Identifier\"]\nrel@{ shape: braces, label: \"id\" }\nrelease --o rel\nrel --&gt; ident\n\nurl[\"URL\"]\nurlRel@{ shape: braces, label: \"website\" }\nrelease --o urlRel\nurlRel --&gt; url</code></pre> Relation Type Relation Label Target Assets Description <code>SimpleRelation</code> <code>id</code> <code>Identifier</code> Links the <code>ProductRelease</code> to other identifiers, such as a serial number <code>SimpleRelation</code> <code>website</code> <code>URL</code> Links the <code>ProductRelease</code> to a website with additional information <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/assets/service/","title":"Service","text":"<p>The Service asset type in the OWASP Open Asset Model (OAM) represents a network-accessible service discovered during external intelligence collection. This typically includes any server process that responded to a connection attempt on a known port\u2014such as web servers, SSH daemons, mail servers, database listeners, and more.</p> <ul> <li> <p>Definition: A <code>Service</code> asset captures metadata about a responding network service, including its type (e.g., <code>http</code>, <code>ssh</code>, <code>ftp</code>), the raw output from its initial response, and optionally a set of key-value <code>attributes</code> such as HTTP headers or protocol banners.</p> </li> <li> <p>Purpose: The <code>Service</code> asset allows the model to anchor discovery events at the protocol layer, enabling linkage between hosts (e.g., IP addresses or FQDNs), ports, and deeper contextual assets like <code>TLSCertificate</code> or <code>Product</code>. This supports questions like: \u201cWhat is responding on port 443?\u201d, \u201cWhich certificates are served from this endpoint?\u201d, or \u201cWhat headers are exposed by this HTTP server?\u201d</p> </li> <li> <p>Design Choice: By treating services as first-class assets, OAM avoids overloading lower-level host or transport layers with application-layer metadata. This cleanly separates service-level observations and makes it easy to enrich, correlate, or reason over what\u2019s actually deployed on a given interface.</p> </li> </ul> <p>The Service asset type anchors application-layer discovery to observable ports on internet-facing hosts, enabling technology fingerprinting, encryption analysis, and vulnerability enrichment across the OAM graph.</p>"},{"location":"open_asset_model/assets/service/#service-attributes","title":"Service Attributes","text":"Attributes Type Required Description <code>unique_id</code> string Unique identifier for the service <code>service_type</code> string Protocol or service label (e.g., <code>http</code>, <code>ssh</code>, <code>smtp</code>) <code>output</code> string Raw response received from the service (e.g., HTTP banner, SSH version) <code>output_length</code> integer Length of the captured <code>output</code> string <code>attributes</code> object Key-value pairs extracted from the service response (e.g., headers, options)"},{"location":"open_asset_model/assets/service/#service-properties","title":"Service Properties","text":"Property Type Property Name Description <code>SimpleProperty</code> <code>last_monitored</code> Tracks when a data source was last queried regarding this Service <code>SourceProperty</code> Source Plugin Name Indicates that the specified data source discovered this Service"},{"location":"open_asset_model/assets/service/#service-outgoing-relations","title":"Service Outgoing Relations","text":"<pre><code>graph TD\nservice[\"Service\"]\norg[\"Organization\"]\nprovider@{ shape: braces, label: \"provider\" }\nservice --o provider\nprovider --&gt; org\n\ncert[\"TLSCertificate\"]\ncertificate@{ shape: braces, label: \"certificate\" }\nservice --o certificate\ncertificate --&gt; cert\n\nfile[\"File\"]\nurl[\"URL\"]\ntos@{ shape: braces, label: \"terms_of_service\" }\nservice --o tos\ntos --&gt; file\ntos --&gt; url\n\nprod[\"Product\"]\nprodrel[\"ProductRelease\"]\nused@{ shape: braces, label: \"product_used\" }\nservice --o used\nused --&gt; prod\nused --&gt; prodrel</code></pre> Relation Type Relation Label Target Assets Description <code>SimpleRelation</code> <code>provider</code> <code>Organization</code> Links the service with the <code>Organization</code> hosting the server <code>SimpleRelation</code> <code>certificate</code> <code>TLSCertificate</code> Links the service with an associated TLS certificate <code>SimpleRelation</code> <code>terms_of_service</code> <code>File</code>, <code>URL</code> Links the service with terms of service information <code>SimpleRelation</code> <code>product_used</code> <code>Product</code>, <code>ProductRelease</code> Links the service to <code>Product</code> and versioning details <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/assets/tls_certificate/","title":"TLSCertificate","text":"<p>The <code>TLSCertificate</code> asset type in the OWASP Open Asset Model (OAM) represents an X.509 certificate used to establish trust in TLS/SSL connections across Internet-facing services. TLS certificates are critical for encrypting traffic, authenticating services, and ensuring secure communication between clients and servers.</p> <p>This asset captures detailed metadata about observed certificates, making it possible to track their usage across domains, detect misconfigurations, monitor expiration, and identify shared infrastructure through certificate reuse. By modeling certificates as first-class assets, the OAM enables graph-based analysis of cryptographic trust relationships and their ties to real-world entities and assets.</p> <p>Each <code>TLSCertificate</code> includes key attributes such as:</p> <ul> <li>Version \u2013 The X.509 version number of the certificate.</li> <li>Serial Number \u2013 A unique identifier assigned by the certificate authority (CA).</li> <li>Subject Common Name (CN) \u2013 The primary identity this certificate claims to represent.</li> <li>Issuer Common Name (CN) \u2013 The identity of the CA that issued the certificate.</li> <li>Validity Period \u2013 Timestamps indicating when the certificate is valid (<code>not_before</code>) and when it expires (<code>not_after</code>).</li> <li>Key Usage / Extended Key Usage \u2013 Lists of intended purposes for the certificate (e.g., <code>DigitalSignature</code>, <code>ServerAuth</code>).</li> <li>Signature Algorithm \u2013 The algorithm used by the CA to sign the certificate.</li> <li>Public Key Algorithm \u2013 The algorithm used by the certificate's public key.</li> <li>CA Flag \u2013 A boolean flag indicating whether the certificate is a Certificate Authority.</li> <li>CRL Distribution Points \u2013 URLs where revocation information for the certificate may be retrieved.</li> <li>Subject Key ID / Authority Key ID \u2013 Identifiers used for verifying trust chains and certificate lineage.</li> </ul> <p>This asset type is commonly used to enrich discovered web services, verify proper encryption practices, and detect certificate sharing across unrelated hosts (e.g., in cloud environments or phishing infrastructure). When linked with assets like <code>FQDN</code>, <code>IPAddress</code>, or <code>URL</code>, <code>TLSCertificate</code> helps establish strong associations between services and the organizations operating them.</p>"},{"location":"open_asset_model/assets/tls_certificate/#tlscertificate-attributes","title":"TLSCertificate Attributes","text":"Attributes Type Required Description <code>version</code> string The X.509 version of the certificate (e.g., <code>3</code>) <code>serial_number</code> string Unique serial number assigned by the issuing CA <code>subject_common_name</code> string The primary domain or identity the certificate is issued for <code>issuer_common_name</code> string The Common Name (CN) of the issuing certificate authority <code>not_before</code> string (datetime) Start of the certificate\u2019s validity period <code>not_after</code> string (datetime) Expiration of the certificate\u2019s validity period <code>key_usage</code> array of strings Allowed cryptographic uses (e.g., <code>DigitalSignature</code>, <code>KeyEncipherment</code>) <code>ext_key_usage</code> array of strings Extended usage purposes (e.g., <code>ServerAuth</code>, <code>ClientAuth</code>) <code>signature_algorithm</code> string Algorithm used to sign the certificate (e.g., <code>SHA256-RSA</code>) <code>public_key_algorithm</code> string Algorithm used in the certificate\u2019s public key (e.g., <code>RSA</code>, <code>ECDSA</code>) <code>is_ca</code> boolean Indicates if the certificate is a Certificate Authority <code>crl_distribution_points</code> array of strings URLs where revocation info can be found <code>subject_key_id</code> string Identifier for the certificate\u2019s public key <code>authority_key_id</code> string Identifier for the public key used to sign this certificate"},{"location":"open_asset_model/assets/tls_certificate/#tlscertificate-properties","title":"TLSCertificate Properties","text":"Property Type Property Name Description <code>SimpleProperty</code> <code>last_monitored</code> Tracks when a data source was last queried regarding this TLSCertificate <code>SourceProperty</code> Source Plugin Name Indicates that the specified data source discovered this TLSCertificate"},{"location":"open_asset_model/assets/tls_certificate/#tlscertificate-outgoing-relations","title":"TLSCertificate Outgoing Relations","text":"<pre><code>graph TD\ntls[\"TLSCertificate\"]\nfqdn[\"FQDN\"]\nfqdnrel@{ shape: braces, label: \"common_name\nsan_dns_name\" }\ntls --o fqdnrel\nfqdnrel --&gt; fqdn\n\ncontact[\"ContactRecord\"]\ncontactrel@{ shape: braces, label: \"subject_contact\nissuer_contact\" }\ntls --o contactrel\ncontactrel --&gt; contact\n\nurl[\"URL\"]\nurlrel@{ shape: braces, label: \"san_url\nocsp_server\nissuing_certificate_url\" }\ntls --o urlrel\nurlrel --&gt; url\n\nipaddr[\"IPAddress\"]\naddress@{ shape: braces, label: \"san_ip_address\" }\ntls --o address\naddress --&gt; ipaddr\n\nident[\"Identifier\"]\nidrel@{ shape: braces, label: \"san_email_address\" }\ntls --o idrel\nidrel --&gt; ident\n\ncert[\"TLSCertificate\"]\nissuer@{ shape: braces, label: \"issuing_certificate\" }\ntls --o issuer\nissuer --&gt; cert</code></pre> Relation Type Relation Label Target Assets Description <code>SimpleRelation</code> <code>common_name</code> <code>FQDN</code> Links the certificate common name to the <code>FQDN</code> asset with that DNS name <code>SimpleRelation</code> <code>subject_contact</code> <code>ContactRecord</code> Links the certificate to subject contact information <code>SimpleRelation</code> <code>issuer_contact</code> <code>ContactRecord</code> Links the certificate to issuer contact information <code>SimpleRelation</code> <code>san_dns_name</code> <code>FQDN</code> Links the certificate to <code>FQDN</code> assets found in the Subject Alternative Name (SAN) field <code>SimpleRelation</code> <code>san_email_address</code> <code>Identifier</code> Links the certificate to <code>Identifier</code> assets found in the Subject Alternative Name (SAN) field <code>SimpleRelation</code> <code>san_ip_address</code> <code>IPAddress</code> Links the certificate to <code>IPAddress</code> assets found in the Subject Alternative Name (SAN) field <code>SimpleRelation</code> <code>san_url</code> <code>URL</code> Links the certificate to <code>URL</code> assets found in the Subject Alternative Name (SAN) field <code>SimpleRelation</code> <code>issuing_certificate</code> <code>TLSCertificate</code> Links a certificate to the issuing <code>TLSCertificate</code> used for signing <code>SimpleRelation</code> <code>issuing_certificate_url</code> <code>URL</code> The <code>URL</code> asset where the issuing <code>TLSCertificate</code> can be found <code>SimpleRelation</code> <code>ocsp_server</code> <code>URL</code> The OCSP responder that can provide status information regarding the validity of a digital certificate <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/assets/url/","title":"URL","text":"<p>The <code>URL</code> asset type is part of the OWASP Open Asset Model (OAM) and represents a fully qualified web resource identifier. This asset captures essential information about a Uniform Resource Locator, including its structure, classification, and the context in which it was discovered or used.</p> <p>URLs are a central component in external-attack surface assessments, as they often map directly to web applications, APIs, or other internet-facing services. Modeling URLs as first-class assets enables automated analysis, correlation with certificates, subdomain enumeration, and vulnerability scanning workflows.</p> <p>Each <code>URL</code> asset includes the following attributes:</p> <ul> <li>Raw URL - The raw and unprocessed URL originally collected.</li> <li>Scheme \u2013 The protocol used (e.g., <code>http</code>, <code>https</code>).</li> <li>Username - The username used in HTTP basic authentication.</li> <li>Password - The password used in HTTP basic authentication.</li> <li>Host \u2013 The domain or IP address portion (e.g., <code>example.com</code>).</li> <li>Port \u2013 Optional\u2014explicit port if non-standard (e.g., <code>8080</code>).</li> <li>Path \u2013 The resource path on the host (e.g., <code>/login</code>).</li> <li>Options \u2013 Extra options used while connecting.</li> <li>Fragment \u2013 Optional\u2014anchor reference within the resource (e.g., <code>#section</code>).</li> </ul> <p>By representing URLs with a dedicated asset structure, OAM supports detailed analysis of web-facing infrastructure\u2014like identifying TLS mismatches, linking subdomains to specific applications, flagging hosts with dynamic or query-based endpoints, and auditing for insecure or deprecated schemes.</p> <p>This asset type plays a key role in workflows such as subdomain takeover detection, API fingerprinting, redirect chain mapping, and vulnerability assessment pipelines.</p>"},{"location":"open_asset_model/assets/url/#url-attributes","title":"URL Attributes","text":"Attributes Type Required Description <code>url</code> string The raw and unprocessed URL originally collected <code>scheme</code> string Protocol used in the URL (e.g., <code>http</code>, <code>https</code>) <code>username</code> string The username used in HTTP basic authentication <code>password</code> string The password used in HTTP basic authentication <code>host</code> string Domain name or IP address (e.g., <code>example.com</code>) <code>port</code> number Optional non-standard port (e.g., <code>8443</code>) <code>path</code> string The URL path component (e.g., <code>/admin</code>) <code>options</code> string Extra options used while connecting <code>fragment</code> string Optional fragment identifier (e.g., <code>#section</code>)"},{"location":"open_asset_model/assets/url/#url-properties","title":"URL Properties","text":"Property Type Property Name Description <code>SimpleProperty</code> <code>last_monitored</code> Tracks when a data source was last queried regarding this URL <code>SourceProperty</code> Source Plugin Name Indicates that the specified data source discovered this URL"},{"location":"open_asset_model/assets/url/#url-outgoing-relations","title":"URL Outgoing Relations","text":"<pre><code>graph TD\nurl[\"URL\"]\nfqdn[\"FQDN (e.g. example.com)\"]\ndomain@{ shape: braces, label: \"domain\" }\nurl --o domain\ndomain --&gt; fqdn\n\nipaddr[\"IPAddress\"]\naddress@{ shape: braces, label: \"ip_address\" }\nurl --o address\naddress --&gt; ipaddr\n\nservice[\"Service\"]\nport@{ shape: braces, label: \"port\" }\nurl --o port\nport --&gt; service\n\nfile[\"File\"]\nfilerel@{ shape: braces, label: \"file\" }\nurl --o filerel\nfilerel --&gt; file</code></pre> Relation Type Relation Label Target Assets Description <code>SimpleRelation</code> <code>domain</code> <code>FQDN</code> Links the URL to the domain name equal to the <code>host</code> attribute <code>SimpleRelation</code> <code>ip_address</code> <code>IPAddress</code> Links the URL to the IP address equal to the <code>host</code> attribute <code>PortRelation</code> <code>port</code> <code>Service</code> Represents the port that served up content for this URL <code>SimpleRelation</code> <code>file</code> <code>File</code> Links the URL to the file that was served up at this location <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/properties/","title":"Properties","text":"<p>In the OWASP Open Asset Model, a property is a typed, descriptive annotation attached to an asset or relation. Properties enrich the graph with granular metadata\u2014timestamps, names, identifiers, classifications, fingerprints, and other scalar or structured values\u2014without altering the core topology of the asset graph.</p> <p>Properties are first-class elements of the model. They provide the facts that support inferences, highlight critical traits, and enable high-resolution filtering or grouping of graph data. Each property is tied to the context in which it was discovered, and many include source attribution for traceability.</p>"},{"location":"open_asset_model/properties/#why-properties-matter","title":"Why Properties Matter","text":"<p>If assets are the nouns and relations are the verbs of the graph, then properties are the adjectives. They give each node and edge its character.</p> <p>Properties bring three core advantages to the OAM:</p> <ol> <li>Precision \u2013 Properties allow representation of fine-grained detail like last time enumerated and confidence score of evidence.</li> <li>Traceability \u2013 Many property types (e.g., <code>SourceProperty</code>, <code>DNSRecordProperty</code>) retain the discovery method and timestamp.</li> <li>Flexibility \u2013 Because properties are modular and loosely typed, new data can be integrated without schema migrations.</li> </ol>"},{"location":"open_asset_model/properties/#property-definition","title":"Property Definition","text":"<p>Property: A typed key-value annotation attached to an asset or relation, used to describe a specific observable or characteristic.</p> <p>Each property answers three questions:</p> <ol> <li> <p>What kind of information is this?    The type (e.g., <code>SimpleProperty</code>, <code>DNSRecordProperty</code>, <code>VulnProperty</code>).</p> </li> <li> <p>What does it say?    A key-value pair or structured object expressing some fact about the asset.</p> </li> <li> <p>Where did it come from?    Optional source metadata, such as the tool, timestamp, or confidence level.</p> </li> </ol>"},{"location":"open_asset_model/properties/#core-property-types","title":"Core Property Types","text":"Property Type Purpose Example Use Case <code>SimpleProperty</code> Generic key-value metadata Tag a domain with <code>last_monitored = 2025-06-20</code> <code>SourceProperty</code> Key-value pair with discovery context Tag an IP with <code>whois_country = US</code> from RDAP <code>DNSRecordProperty</code> Structured DNS lookup result Record an <code>A</code> record resolution for an FQDN <code>VulnProperty</code> Basic vulnerability data Attach <code>CVE-2023-1234</code> to a service asset <p>Each property is evaluated in the context of its parent asset or relation and contributes to filtering, scoring, reporting, and pivot logic within the model.</p>"},{"location":"open_asset_model/properties/#property-schema-conceptually","title":"Property Schema (Conceptually)","text":"<p>Example of a basic <code>SourceProperty</code> attached to an <code>IPAddress</code>:</p> <pre><code>{\n  \"type\": \"SourceProperty\",\n  \"name\": \"RDAP\",\n  \"confidence\": 75,\n}\n</code></pre> <p>Example of a DNSRecordProperty on an FQDN:</p> <pre><code>{\n  \"type\": \"DNSRecordProperty\",\n  \"property_name\": \"dns_record\",\n  \"header\": {\n    \"rr_type\": 6,\n    \"class\": 1,\n    \"ttl\": 86400,\n  },\n  \"data\": \"example.com. 86400 IN SOA ns1.example.com. admin.example.com.\",\n}\n</code></pre>"},{"location":"open_asset_model/properties/#properties-in-graph-queries","title":"Properties in Graph Queries","text":"<p>Properties are not directly navigable edges, but they are critical for filtering and analysis. They can be used in:</p> <p>assoc queries to filter assets by specific values.</p> <p>Temporal analysis to find stale, newly discovered, or frequently updated assets.</p>"},{"location":"open_asset_model/properties/#where-to-go-next","title":"Where to Go Next","text":"<p>Explore the types of data used to enrich and explain assets in the graph:</p> <ul> <li>Assets \u2013 The core entities in the graph.</li> <li>Relations \u2013 Overview of Relations in the Open Asset Model.</li> <li>Triples \u2013 Performing graph queries using SPARQL-style syntax.</li> <li>Assoc Tool \u2013 Using the command-line tool that queries the graph.</li> </ul> <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache 2.0.</p>"},{"location":"open_asset_model/properties/dns_property/","title":"DNSRecordProperty","text":"<p>The <code>DNSRecordProperty</code> is a structured property type in the OWASP Open Asset Model (OAM) used to represent observed Domain Name System (DNS) record data associated with an asset. Unlike a <code>SimpleProperty</code>, which encapsulate a single key-value pair, the <code>DNSRecordProperty</code> captures a richer snapshot of a specific DNS lookup result, including the record type, value, and TTL.</p> <p>DNS information is central to many asset discovery and enumeration processes, and the <code>DNSRecordProperty</code> provides a consistent way to describe these findings in the model. It supports representing common record types such as TXT, SOA, HINFO, and others, while also enabling timestamped tracking of when the record was resolved.</p> <p>Each <code>DNSRecordProperty</code> includes the following components:</p> <ul> <li>Property Name \u2013 The name of the property, which should be <code>dns_record</code>.</li> <li>Record Type \u2013 The type of DNS record (e.g., <code>TXT</code>, <code>SOA</code>, <code>HINFO</code>).</li> <li>Record Data \u2013 The result of the DNS resolution (e.g., text string).</li> <li>TTL \u2013 The time-to-live value from the DNS response, indicating how long the result should be considered valid.</li> </ul> <p>By modeling DNS data with a dedicated property type, <code>DNSRecordProperty</code> enables more precise tracking and temporal reasoning around changes in DNS infrastructure. It supports threat hunting, infrastructure correlation, asset ownership validation, and detection of transient or ephemeral DNS configurations.</p>"},{"location":"open_asset_model/properties/dns_property/#dnsrecordproperty-attributes","title":"DNSRecordProperty Attributes","text":"Attributes Type Required Description <code>property_name</code> string The name of the property that should be <code>dns_record</code> <code>header.rr_type</code> number Specifies the type of resource within the DNS record <code>header.class</code> number 1, IN class (Internet), is the most commonly used <code>header.ttl</code> number Specifies how long a DNS record should be cached <code>data</code> string The value from the data field of the DNS resource record <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/properties/simple_property/","title":"SimpleProperty","text":"<p>The <code>SimpleProperty</code> is one of the foundational data types used in the OWASP Open Asset Model (OAM) to describe metadata associated with an asset or relation. As its name suggests, a <code>SimpleProperty</code> represents a basic key-value pair that conveys a single, scalar piece of information about an asset or relation\u2014such as a name, identifier, timestamp, or descriptive attribute.</p> <p>This property type is designed for flexibility and broad applicability. It is not limited to a fixed schema or controlled vocabulary, making it well-suited for capturing diverse details across many different asset and relation types. For example, a <code>SimpleProperty</code> might describe the version of a software component, the date a DNS name was last resolved, or a flag indicating whether a host has a JARM fingerprint.</p> <p>Each <code>SimpleProperty</code> includes the following core components:</p> <ul> <li>Name \u2013 A string that identifies the nature or role of the property (e.g., <code>last_monitored</code>).</li> <li>Value \u2013 A string-encoded representation of the property's actual value (e.g., <code>\"DNS-IP\"</code>).</li> </ul> <p>By standardizing on this minimal structure, <code>SimpleProperty</code> allows assets and relations in the model to be richly annotated without enforcing strict typing or domain-specific schemas up front. This supports extensibility, integration with heterogeneous data sources, and future evolution of the model.</p> <p>In practice, <code>SimpleProperty</code> entries are often used when importing information from external tools, integrating OSINT data, or performing enrichment tasks across discovered assets and relations. The model treats them as first-class citizens in the graph, enabling reasoning, filtering, and correlation based on any attached properties.</p>"},{"location":"open_asset_model/properties/simple_property/#simpleproperty-attributes","title":"SimpleProperty Attributes","text":"Attributes Type Required Description <code>property_name</code> string A string that identifies the nature or role of the property <code>property_value</code> string A string-encoded representation of the property's actual value <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/properties/source_property/","title":"SourceProperty","text":"<p>The <code>SourceProperty</code> is a specialized property type in the OWASP Open Asset Model (OAM) that captures context about where that information came from. This makes <code>SourceProperty</code> especially valuable in scenarios where provenance, traceability, and confidence are essential.</p> <p>The <code>SourceProperty</code> allows consumers of the model to understand how and from where a piece of data was obtained. This is particularly useful when integrating data from OSINT sources, third-party APIs, security tools, or historical archives.</p> <p>Each <code>SourceProperty</code> includes the following components:</p> <ul> <li>Name \u2013 Name of the engine plugin that discovered the asset or relation (e.g., <code>DNS-IP</code>, <code>RDAP</code>, <code>GLIEF</code>).</li> <li>Confidence \u2013 A numerical value providing a percentage of confidence (e.g., <code>50</code>, <code>75</code>, <code>100</code>).</li> </ul> <p>By coupling assets and relations with their origin, <code>SourceProperty</code> supports trust-aware decision-making and enables the model to be used in environments where data reliability and reproducibility are critical. Consumers can prioritize or filter information based on its source, aiding in validation and reducing false positives in automated analysis pipelines.</p> <p>All Amass engine plugins mark discovered assets and associations between them with source information to build the breadcrumb trail and better understand how the discoveries were made during the enumeration process.</p>"},{"location":"open_asset_model/properties/source_property/#sourceproperty-attributes","title":"SourceProperty Attributes","text":"Attributes Type Required Description <code>name</code> string Name of the engine plugin that discovered the asset or relation <code>confidence</code> number A value 0 through 100 representing the confidence percentage <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/properties/vuln_property/","title":"VulnProperty","text":"<p>The <code>VulnProperty</code> is a specialized property type in the OWASP Open Asset Model (OAM) used to represent basic vulnerability information associated with an asset or relation. It is designed to capture structured yet concise details about known or observed security issues, such as CVEs, misconfigurations, or weak service configurations.</p> <p>Each <code>VulnProperty</code> instance describes a single vulnerability and is linked to the asset or relationship it affects. This allows for clear attribution of risk within the asset graph and enables reasoning about exposure across a discovered attack surface.</p> <p>The <code>VulnProperty</code> structure includes:</p> <ul> <li>ID \u2013 A unique identifier for the vulnerability entry, often matching a standard enumeration such as a CVE ID (e.g., <code>CVE-2024-12345</code>).</li> <li>Description \u2013 A brief summary of the vulnerability's nature or impact.</li> <li>Source \u2013 The origin of the vulnerability data, such as the scanner or source system that identified it (e.g., <code>nuclei</code>, <code>cvefeed</code>, <code>custom-rule-engine</code>).</li> <li>Category \u2013 A high-level classification of the vulnerability, such as <code>exposed-service</code>, <code>software-vuln</code>, or <code>configuration</code>.</li> <li>Enumeration \u2013 A standardized vulnerability taxonomy used to identify the issue, such as <code>CVE</code>, <code>CWE</code>, or a custom identifier.</li> <li>Reference \u2013 A URL or external reference to more detailed information (e.g., an NVD page or vendor advisory).</li> </ul> <p>By standardizing how vulnerability metadata is attached to assets and relations, <code>VulnProperty</code> supports efficient integration of findings from vulnerability scanners, intelligence feeds, and custom assessment tooling. It also facilitates filtering, correlation, and prioritization of risks during triage or remediation workflows.</p>"},{"location":"open_asset_model/properties/vuln_property/#vulnproperty-attributes","title":"VulnProperty Attributes","text":"Attributes Type Required Description <code>id</code> string A unique identifier for the vulnerability (e.g., <code>CVE-2024-12345</code>) <code>desc</code> string A brief human-readable summary of the vulnerability <code>source</code> string The name of the tool, feed, or method that reported the vulnerability <code>category</code> string A general classification of the vulnerability (e.g., <code>software-vuln</code>) <code>enum</code> string The taxonomy or enumeration system used (e.g., <code>CVE</code>, <code>CWE</code>) <code>ref</code> string An optional reference URL for more information about the vulnerability <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/relations/","title":"Relations","text":"<p>In the OWASP Open Asset Model, a relation is a typed, directed connection between two assets that expresses how they are linked in the external world. Relations transform isolated observations into an interconnected graph, enabling reasoning over ownership, control, communication, service structure, and many other dimensions. Each relation carries contextual metadata such as discovery source, timestamps, and confidence, and is a first-class citizen in the data model\u2014critical for building a coherent picture of an organization's external footprint.</p>"},{"location":"open_asset_model/relations/#why-relations-matter","title":"Why Relations Matter","text":"<p>While assets are the atomic units of external exposure, relations are what make those atoms intelligible as systems. They represent the structure, flow, and attribution logic that connects seemingly disparate observations into a meaningful model.</p> <p>Relations bring three core advantages to the OAM:</p> <ol> <li>Contextual Linking \u2013 Relations encode meaningful semantics (e.g., announces, contains, registration) between assets.</li> <li>Graph Navigation \u2013 They enable powerful queries such as tracing supply chain dependencies or resolving domain-to-IP mappings.</li> <li>Explainability \u2013 Each relation retains source, timestamp, and confidence, making inferences and automated decisions transparent and reproducible.</li> </ol>"},{"location":"open_asset_model/relations/#relation-definition","title":"Relation Definition","text":"<p>Relation: A typed, directional edge connecting two assets that captures a discoverable or inferred relationship between them.</p> <p>Each relation answers three questions:</p> <ol> <li>What is the connection?    The label (e.g., dns_record, contains, owns, announces).</li> <li>What assets are involved?    A source asset and a target asset, each uniquely identified.</li> <li>When was it discovered?    A timestamp for when it was first and most recently seen.</li> </ol>"},{"location":"open_asset_model/relations/#core-relation-schema-conceptually","title":"Core Relation Schema (Conceptually)","text":"<pre><code>{\n  \"label\": \"contains\",\n  \"source\": \"Netblock/192.0.2.0-24\",\n  \"target\": \"IPAddress/192.0.2.4\",\n  \"created_at\": \"2025-06-20T14:22:00Z\",\n  \"last_seen\": \"2025-06-20T14:22:00Z\",\n}\n</code></pre> <p>See specific relation types for actual JSON field names. Also, see the Assoc Tool and Triples for more information regarding how to query the data collected.</p>"},{"location":"open_asset_model/relations/#common-relation-labels-partial","title":"Common Relation Labels (Partial)","text":"Relation Type From (Source Asset) To (Target Asset) Meaning dns_record FQDN IPAddress DNS resolved A/AAAA record contains Netblock IPAddress IP belongs to CIDR range announces AutonomousSystem Netblock AS BGP route announcement registration Netblock IPNetRecord Ownership or allocation data <p>The list is extensible\u2014new relation types are added as threat models and data sources evolve.</p>"},{"location":"open_asset_model/relations/#directionality-and-semantics","title":"Directionality and Semantics","text":"<p>Relations are directed: a relation from A \u2192 B is not the same as B \u2192 A. For instance:</p> <ul> <li>FQDN \u2192 IPAddress via <code>dns_record</code> indicates resolution;</li> <li>IPAddress \u2192 FQDN is not automatically implied and may require reverse DNS (<code>ptr_record</code>).</li> </ul> <p>Understanding directionality is key to constructing valid traversal paths and interpreting graph queries.</p>"},{"location":"open_asset_model/relations/#role-in-graph-queries","title":"Role in Graph Queries","text":"<p>Relations are the edges that enable:</p> <ul> <li>Ownership traversal: Domain \u2192 Organization \u2192 LegalName</li> <li>Infrastructure mapping: Service \u2192 IP \u2192 Netblock \u2192 AS</li> <li>Contact pivoting: TLSCertificate \u2192 ContactRecord \u2192 Organization</li> </ul> <p>The expressive power of the model arises from chaining these relations through triple-based queries.</p> <p>Example:</p> <p>\u201cWhich TLS certificates are served from IPs owned by ASNs linked to Acme Corp?\u201d</p> <p>This query may walk: <code>Organization \u2192 organization \u2192 ContactRecord \u2192 registrant \u2192 AutnumRecord \u2192 registration \u2192 AutonomousSystem \u2192 announces \u2192 Netblock \u2192 contains \u2192 IPAddress \u2192 port \u2192 Service \u2192 certificate \u2192 TLSCertificate</code></p>"},{"location":"open_asset_model/relations/#where-to-go-next","title":"Where to Go Next","text":"<p>Learn more about the structure and usage of the model:</p> <ul> <li>Assets \u2013 The core entities in the graph.</li> <li>Properties \u2013 Descriptive metadata that enrich assets.</li> <li>Triples \u2013 Performing graph queries using SPARQL-style syntax.</li> <li>Assoc Tool \u2013 Using the command-line tool that queries the graph.</li> </ul> <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache 2.0.</p>"},{"location":"open_asset_model/relations/basic_dns_relation/","title":"BasicDNSRelation","text":"<p>The BasicDNSRelation in the OWASP Open Asset Model (OAM) represents a minimal DNS resource record that links a DNS name to either another DNS name or an IP address, using only standard DNS header information.</p> <ul> <li> <p>Definition: A <code>BasicDNSRelation</code> captures DNS records such as A, AAAA, or CNAME that map a hostname to another hostname or IP address. It includes only the DNS header fields and the target reference, without storing extended metadata or record-specific attributes.</p> </li> <li> <p>Purpose: This relation type is designed to reflect simple DNS resolution chains within the asset model. It allows mapping how DNS names ultimately resolve to assets or addresses, which is fundamental for understanding how domain names expose infrastructure in an attack surface.</p> </li> <li> <p>Design Choice: By limiting the relation to just the DNS header and the resolved name or address, <code>BasicDNSRelation</code> avoids the complexity of modeling full DNS behavior (e.g., priorities or DNSSEC). It's intended for lightweight use cases where basic DNS resolution structure is sufficient.</p> </li> </ul> <p>In summary, <code>BasicDNSRelation</code> enables efficient modeling of essential DNS relationships, illustrating how domain names resolve in a minimal, structured format, without the overhead of full DNS record semantics.</p>"},{"location":"open_asset_model/relations/basic_dns_relation/#basicdnsrelation-attributes","title":"BasicDNSRelation Attributes","text":"Attributes Type Required Description <code>label</code> string The label for the relation between two assets <code>header.rr_type</code> number Specifies the type of resource within the DNS record <code>header.class</code> number 1, IN class (Internet), is the most commonly used <code>header.ttl</code> number Specifies how long a DNS record should be cached"},{"location":"open_asset_model/relations/basic_dns_relation/#basicdnsrelation-properties","title":"BasicDNSRelation Properties","text":"Property Type Property Name Description <code>SourceProperty</code> Source Plugin Name Indicates that the specified data source discovered this BasicDNSRelation <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/relations/port_relation/","title":"PortRelation","text":"<p>The PortRelation in the OWASP Open Asset Model (OAM) captures the association between an asset and a specific network port.</p> <ul> <li> <p>Definition: A <code>PortRelation</code> denotes that a network port (identified by its number and protocol, e.g., TCP/80) is exposed or served by a given asset. It maps the fact that an asset either offers or uses a service on a designated port.</p> </li> <li> <p>Purpose: This relation is essential for modeling network-level exposure of assets. By linking an asset to its port(s), security practitioners can better understand which assets are externally accessible or internally listening, which is critical knowledge for attack surface mapping and vulnerability assessment.</p> </li> <li> <p>Design Choice: Unlike <code>SimpleRelation</code>, <code>PortRelation</code> includes the port identifier and protocol as structured metadata, giving more granularity. It avoids over-specification (e.g. connection counts or performance details) and focuses on capturing which port is involved and how (via protocol).</p> </li> </ul> <p>In essence, <code>PortRelation</code> adds precise network exposure context to the OAM, letting teams visualize and assess attack vectors related to service ports without unnecessary detail.</p>"},{"location":"open_asset_model/relations/port_relation/#portrelation-attributes","title":"PortRelation Attributes","text":"Attributes Type Required Description <code>label</code> string The label for the relation between two assets <code>port_number</code> number The number assigned to the discovered port <code>protocol</code> string The protocol stack of the specified port"},{"location":"open_asset_model/relations/port_relation/#portrelation-properties","title":"PortRelation Properties","text":"Property Type Property Name Description <code>SourceProperty</code> Source Plugin Name Indicates that the specified data source discovered this PortRelation <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/relations/pref_dns_relation/","title":"PrefDNSRelation","text":"<p>The PrefDNSRelation in the OWASP Open Asset Model (OAM) is used to represent DNS resource records that include a preference value, such as MX records that define mail server priority for a domain.</p> <ul> <li> <p>Definition: A <code>PrefDNSRelation</code> captures the association between a DNS name and another DNS name or IP address, along with a numeric preference value that indicates priority. This is commonly used for records like <code>MX</code>, <code>SRV</code>, or other types where ordering or selection is influenced by a preference number.</p> </li> <li> <p>Purpose: This relation is critical for modeling DNS-based service routing and failover configurations. For example, in an <code>MX</code> record, the preference indicates which mail server should be contacted first. Accurately capturing this relationship helps model infrastructure behavior during service discovery, redundancy, and load distribution.</p> </li> <li> <p>Design Choice: <code>PrefDNSRelation</code> builds on the simpler <code>BasicDNSRelation</code> by including a structured <code>preference</code> attribute, while still avoiding full record verbosity (e.g., no TTLs, weights, ports, or target service names). This keeps the model lightweight but expressive enough for meaningful DNS prioritization use cases.</p> </li> </ul> <p>In summary, <code>PrefDNSRelation</code> extends basic DNS modeling by introducing priority-aware resolution, enabling the OAM to capture more nuanced DNS relationships where preference order matters.</p>"},{"location":"open_asset_model/relations/pref_dns_relation/#prefdnsrelation-attributes","title":"PrefDNSRelation Attributes","text":"Attributes Type Required Description <code>label</code> string The label for the relation between two assets <code>header.rr_type</code> number Specifies the type of resource within the DNS record <code>header.class</code> number 1, IN class (Internet), is the most commonly used <code>header.ttl</code> number Specifies how long a DNS record should be cached <code>preference</code> number Captures the preference or priority value for this record"},{"location":"open_asset_model/relations/pref_dns_relation/#prefdnsrelation-properties","title":"PrefDNSRelation Properties","text":"Property Type Property Name Description <code>SourceProperty</code> Source Plugin Name Indicates that the specified data source discovered this PrefDNSRelation <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/relations/simple_relation/","title":"SimpleRelation","text":"<p>The SimpleRelation in the OWASP Open Asset Model (OAM) is the most straightforward way to express a connection between two assets.</p> <ul> <li> <p>Definition: A <code>SimpleRelation</code> signifies a directed relationship from one asset to another, capturing things like <code>dns_record</code>, <code>contains</code>, or <code>announces</code>, without added complexity or metadata. It links one asset (the subject) to another (the object).</p> </li> <li> <p>Purpose: It models basic asset interdependencies or associations that are essential for understanding attack surface connectivity. By mapping these simple links, organizations can trace how one asset might depend on or enable another from a security standpoint.</p> </li> <li> <p>Design Choice: The model intentionally avoids over-engineering by excluding rich semantics or additional fields like roles, weights, or descriptions in a <code>SimpleRelation</code>. For more detailed modeling, other specialized relation types can be used.</p> </li> </ul> <p>In essence, the <code>SimpleRelation</code> is a clean, minimal tool used within the OAM to express direct and uncomplicated connections between assets, helping maintain clarity while capturing essential connectivity information.</p>"},{"location":"open_asset_model/relations/simple_relation/#simplerelation-attributes","title":"SimpleRelation Attributes","text":"Attributes Type Required Description <code>label</code> string The label for the relation between two assets"},{"location":"open_asset_model/relations/simple_relation/#simplerelation-properties","title":"SimpleRelation Properties","text":"Property Type Property Name Description <code>SourceProperty</code> Source Plugin Name Indicates that the specified data source discovered this SimpleRelation <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"},{"location":"open_asset_model/relations/srv_dns_relation/","title":"SRVDNSRelation","text":"<p>The SRVDNSRelation in the OWASP Open Asset Model (OAM) is used to represent DNS SRV (Service) records, which include detailed routing information for locating services such as SIP, XMPP, or LDAP.</p> <ul> <li> <p>Definition: An <code>SRVDNSRelation</code> captures the mapping from a DNS service name (e.g., <code>_sip._tcp.example.com</code>) to a target host or IP address, along with structured metadata including priority, weight, and port. These attributes are fundamental to how SRV records guide service resolution.</p> </li> <li> <p>Purpose: This relation type is essential for modeling DNS-based service discovery mechanisms where clients need to select among multiple service endpoints based on priority and load-balancing rules. Including all SRV-specific attributes enables accurate representation of how services are discovered and accessed in real-world deployments.</p> </li> <li> <p>Design Choice: <code>SRVDNSRelation</code> is a more detailed extension of DNS relation types like <code>BasicDNSRelation</code> or <code>PrefDNSRelation</code>. It includes:</p> </li> <li><code>priority</code>: Defines the order in which targets should be attempted (lower is tried first).</li> <li><code>weight</code>: Used for load balancing among targets with the same priority.</li> <li><code>port</code>: Indicates the port on which the service is running.</li> </ul> <p>This richer structure allows for nuanced modeling of service behaviors and routing policies that simpler DNS relations cannot capture.</p> <p>In summary, <code>SRVDNSRelation</code> brings full support for SRV record semantics into the OAM, enabling accurate modeling of service-based resolution patterns that are critical in modern, distributed infrastructure.</p>"},{"location":"open_asset_model/relations/srv_dns_relation/#srvdnsrelation-attributes","title":"SRVDNSRelation Attributes","text":"Attributes Type Required Description <code>label</code> string The label for the relation between two assets <code>header.rr_type</code> number Specifies the type of resource within the DNS record <code>header.class</code> number 1, IN class (Internet), is the most commonly used <code>header.ttl</code> number Specifies how long a DNS record should be cached <code>priority</code> number Captures the priority value for this record <code>weight</code> number Captures the weight value for this record <code>port</code> number Indicates the port on which the service is running"},{"location":"open_asset_model/relations/srv_dns_relation/#srvdnsrelation-properties","title":"SRVDNSRelation Properties","text":"Property Type Property Name Description <code>SourceProperty</code> Source Plugin Name Indicates that the specified data source discovered this SRVDNSRelation <p>\u00a9 2025 Jeff Foley \u2014 Licensed under Apache\u00a02.0.</p>"}]}